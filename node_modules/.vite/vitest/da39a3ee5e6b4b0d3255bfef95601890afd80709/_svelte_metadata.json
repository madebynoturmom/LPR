{"compilerOptions":{"css":"external","dev":true,"hmr":false},"configFile":"/home/main/lpr-app/svelte.config.js","extensions":[".svelte",".svx"],"preprocess":{"name":"mdsvex","markup":"async ({ content, filename }) => {\n\t\t\tlet _layout = {};\n\t\t\tlet layout_mode = 'single';\n\n\t\t\t// if `layout_processed` is undefined, we need to process the layouts\n\t\t\tif (!layouts_processed && !is_browser) {\n\t\t\t\tlet resolve;\n\t\t\t\t// set `layout_processed` before the first await to prevent race conditions\n\t\t\t\tlayouts_processed = new Promise((r) => (resolve = r));\n\t\t\t\tawait handle_path();\n\t\t\t\tif (typeof layout === 'string') {\n\t\t\t\t\t_layout.__mdsvex_default = {\n\t\t\t\t\t\tpath: await resolve_layout(layout),\n\t\t\t\t\t\tcomponents: [],\n\t\t\t\t\t};\n\t\t\t\t} else if (typeof layout === 'object') {\n\t\t\t\t\tlayout_mode = 'named';\n\t\t\t\t\tfor (const name in layout) {\n\t\t\t\t\t\t_layout[name] = {\n\t\t\t\t\t\t\tpath: await resolve_layout(layout[name]),\n\t\t\t\t\t\t\tcomponents: [],\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_layout = await process_layouts(_layout);\n\t\t\t\tparser.add_layouts(_layout, layout_mode);\n\t\t\t\t// resolve the `layout_processed` promise to unlock the rest of the file\n\t\t\t\t// that are waiting before calling parser.process\n\t\t\t\tresolve();\n\t\t\t}\n\n\t\t\tif (highlight && highlight.highlighter === undefined) {\n\t\t\t\thighlight.highlighter = code_highlight;\n\t\t\t}\n\n\t\t\tconst extensionsParts = (extensions || [extension]).map((ext) =>\n\t\t\t\text.startsWith('.') ? ext : '.' + ext\n\t\t\t);\n\t\t\tif (!extensionsParts.some((ext) => filename.endsWith(ext))) return;\n\n\t\t\t// before calling parser.process, we need to wait for the layouts to be processed\n\t\t\t// or else the parser will be frozen\n\t\t\tawait layouts_processed;\n\t\t\tconst parsed = await parser.process({ contents: content, filename });\n\t\t\treturn {\n\t\t\t\tcode: parsed.contents ,\n\t\t\t\tdata: parsed.data ,\n\t\t\t\tmap: '',\n\t\t\t};\n\t\t}"}}