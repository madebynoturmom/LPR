{"version":3,"file":"index3-DE5iFVeB.js","sources":["../../../node_modules/drizzle-orm/entity.js","../../../node_modules/drizzle-orm/column.js","../../../node_modules/drizzle-orm/column-builder.js","../../../node_modules/drizzle-orm/table.utils.js","../../../node_modules/drizzle-orm/pg-core/columns/enum.js","../../../node_modules/drizzle-orm/subquery.js","../../../node_modules/drizzle-orm/tracing.js","../../../node_modules/drizzle-orm/view-common.js","../../../node_modules/drizzle-orm/table.js","../../../node_modules/drizzle-orm/sql/sql.js","../../../node_modules/drizzle-orm/alias.js","../../../node_modules/drizzle-orm/errors.js","../../../node_modules/drizzle-orm/logger.js","../../../node_modules/drizzle-orm/query-promise.js","../../../node_modules/drizzle-orm/utils.js","../../../node_modules/drizzle-orm/pg-core/table.js","../../../node_modules/drizzle-orm/pg-core/primary-keys.js","../../../node_modules/drizzle-orm/sql/expressions/conditions.js","../../../node_modules/drizzle-orm/sql/expressions/select.js","../../../node_modules/drizzle-orm/relations.js","../../../node_modules/drizzle-orm/selection-proxy.js","../../../node_modules/drizzle-orm/sqlite-core/foreign-keys.js","../../../node_modules/drizzle-orm/sqlite-core/unique-constraint.js","../../../node_modules/drizzle-orm/sqlite-core/columns/common.js","../../../node_modules/drizzle-orm/sqlite-core/columns/blob.js","../../../node_modules/drizzle-orm/sqlite-core/columns/custom.js","../../../node_modules/drizzle-orm/sqlite-core/columns/integer.js","../../../node_modules/drizzle-orm/sqlite-core/columns/numeric.js","../../../node_modules/drizzle-orm/sqlite-core/columns/real.js","../../../node_modules/drizzle-orm/sqlite-core/columns/text.js","../../../node_modules/drizzle-orm/sqlite-core/columns/all.js","../../../node_modules/drizzle-orm/sqlite-core/table.js","../../../node_modules/drizzle-orm/sqlite-core/utils.js","../../../node_modules/drizzle-orm/sqlite-core/query-builders/delete.js","../../../node_modules/drizzle-orm/casing.js","../../../node_modules/drizzle-orm/sqlite-core/view-base.js","../../../node_modules/drizzle-orm/sqlite-core/dialect.js","../../../node_modules/drizzle-orm/query-builders/query-builder.js","../../../node_modules/drizzle-orm/sqlite-core/query-builders/select.js","../../../node_modules/drizzle-orm/sqlite-core/query-builders/query-builder.js","../../../node_modules/drizzle-orm/sqlite-core/query-builders/insert.js","../../../node_modules/drizzle-orm/sqlite-core/query-builders/update.js","../../../node_modules/drizzle-orm/sqlite-core/query-builders/count.js","../../../node_modules/drizzle-orm/sqlite-core/query-builders/query.js","../../../node_modules/drizzle-orm/sqlite-core/query-builders/raw.js","../../../node_modules/drizzle-orm/sqlite-core/db.js","../../../node_modules/drizzle-orm/cache/core/cache.js","../../../node_modules/drizzle-orm/sqlite-core/session.js","../../../node_modules/drizzle-orm/better-sqlite3/session.js","../../../node_modules/drizzle-orm/better-sqlite3/driver.js","../../../.svelte-kit/adapter-node/chunks/index3.js"],"sourcesContent":["const entityKind = Symbol.for(\"drizzle:entityKind\");\nconst hasOwnEntityKind = Symbol.for(\"drizzle:hasOwnEntityKind\");\nfunction is(value, type) {\n  if (!value || typeof value !== \"object\") {\n    return false;\n  }\n  if (value instanceof type) {\n    return true;\n  }\n  if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n    throw new Error(\n      `Class \"${type.name ?? \"<unknown>\"}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`\n    );\n  }\n  let cls = Object.getPrototypeOf(value).constructor;\n  if (cls) {\n    while (cls) {\n      if (entityKind in cls && cls[entityKind] === type[entityKind]) {\n        return true;\n      }\n      cls = Object.getPrototypeOf(cls);\n    }\n  }\n  return false;\n}\nexport {\n  entityKind,\n  hasOwnEntityKind,\n  is\n};\n//# sourceMappingURL=entity.js.map","import { entityKind } from \"./entity.js\";\nclass Column {\n  constructor(table, config) {\n    this.table = table;\n    this.config = config;\n    this.name = config.name;\n    this.keyAsName = config.keyAsName;\n    this.notNull = config.notNull;\n    this.default = config.default;\n    this.defaultFn = config.defaultFn;\n    this.onUpdateFn = config.onUpdateFn;\n    this.hasDefault = config.hasDefault;\n    this.primary = config.primaryKey;\n    this.isUnique = config.isUnique;\n    this.uniqueName = config.uniqueName;\n    this.uniqueType = config.uniqueType;\n    this.dataType = config.dataType;\n    this.columnType = config.columnType;\n    this.generated = config.generated;\n    this.generatedIdentity = config.generatedIdentity;\n  }\n  static [entityKind] = \"Column\";\n  name;\n  keyAsName;\n  primary;\n  notNull;\n  default;\n  defaultFn;\n  onUpdateFn;\n  hasDefault;\n  isUnique;\n  uniqueName;\n  uniqueType;\n  dataType;\n  columnType;\n  enumValues = void 0;\n  generated = void 0;\n  generatedIdentity = void 0;\n  config;\n  mapFromDriverValue(value) {\n    return value;\n  }\n  mapToDriverValue(value) {\n    return value;\n  }\n  // ** @internal */\n  shouldDisableInsert() {\n    return this.config.generated !== void 0 && this.config.generated.type !== \"byDefault\";\n  }\n}\nexport {\n  Column\n};\n//# sourceMappingURL=column.js.map","import { entityKind } from \"./entity.js\";\nclass ColumnBuilder {\n  static [entityKind] = \"ColumnBuilder\";\n  config;\n  constructor(name, dataType, columnType) {\n    this.config = {\n      name,\n      keyAsName: name === \"\",\n      notNull: false,\n      default: void 0,\n      hasDefault: false,\n      primaryKey: false,\n      isUnique: false,\n      uniqueName: void 0,\n      uniqueType: void 0,\n      dataType,\n      columnType,\n      generated: void 0\n    };\n  }\n  /**\n   * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n   *\n   * @example\n   * ```ts\n   * const users = pgTable('users', {\n   * \tid: integer('id').$type<UserId>().primaryKey(),\n   * \tdetails: json('details').$type<UserDetails>().notNull(),\n   * });\n   * ```\n   */\n  $type() {\n    return this;\n  }\n  /**\n   * Adds a `not null` clause to the column definition.\n   *\n   * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n   */\n  notNull() {\n    this.config.notNull = true;\n    return this;\n  }\n  /**\n   * Adds a `default <value>` clause to the column definition.\n   *\n   * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n   *\n   * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n   */\n  default(value) {\n    this.config.default = value;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Adds a dynamic default value to the column.\n   * The function will be called when the row is inserted, and the returned value will be used as the column value.\n   *\n   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n   */\n  $defaultFn(fn) {\n    this.config.defaultFn = fn;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Alias for {@link $defaultFn}.\n   */\n  $default = this.$defaultFn;\n  /**\n   * Adds a dynamic update value to the column.\n   * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.\n   * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.\n   *\n   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n   */\n  $onUpdateFn(fn) {\n    this.config.onUpdateFn = fn;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Alias for {@link $onUpdateFn}.\n   */\n  $onUpdate = this.$onUpdateFn;\n  /**\n   * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n   *\n   * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n   */\n  primaryKey() {\n    this.config.primaryKey = true;\n    this.config.notNull = true;\n    return this;\n  }\n  /** @internal Sets the name of the column to the key within the table definition if a name was not given. */\n  setName(name) {\n    if (this.config.name !== \"\") return;\n    this.config.name = name;\n  }\n}\nexport {\n  ColumnBuilder\n};\n//# sourceMappingURL=column-builder.js.map","const TableName = Symbol.for(\"drizzle:Name\");\nexport {\n  TableName\n};\n//# sourceMappingURL=table.utils.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgEnumObjectColumnBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgEnumObjectColumnBuilder\";\n  constructor(name, enumInstance) {\n    super(name, \"string\", \"PgEnumObjectColumn\");\n    this.config.enum = enumInstance;\n  }\n  /** @internal */\n  build(table) {\n    return new PgEnumObjectColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass PgEnumObjectColumn extends PgColumn {\n  static [entityKind] = \"PgEnumObjectColumn\";\n  enum;\n  enumValues = this.config.enum.enumValues;\n  constructor(table, config) {\n    super(table, config);\n    this.enum = config.enum;\n  }\n  getSQLType() {\n    return this.enum.enumName;\n  }\n}\nconst isPgEnumSym = Symbol.for(\"drizzle:isPgEnum\");\nfunction isPgEnum(obj) {\n  return !!obj && typeof obj === \"function\" && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\nclass PgEnumColumnBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgEnumColumnBuilder\";\n  constructor(name, enumInstance) {\n    super(name, \"string\", \"PgEnumColumn\");\n    this.config.enum = enumInstance;\n  }\n  /** @internal */\n  build(table) {\n    return new PgEnumColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass PgEnumColumn extends PgColumn {\n  static [entityKind] = \"PgEnumColumn\";\n  enum = this.config.enum;\n  enumValues = this.config.enum.enumValues;\n  constructor(table, config) {\n    super(table, config);\n    this.enum = config.enum;\n  }\n  getSQLType() {\n    return this.enum.enumName;\n  }\n}\nfunction pgEnum(enumName, input) {\n  return Array.isArray(input) ? pgEnumWithSchema(enumName, [...input], void 0) : pgEnumObjectWithSchema(enumName, input, void 0);\n}\nfunction pgEnumWithSchema(enumName, values, schema) {\n  const enumInstance = Object.assign(\n    (name) => new PgEnumColumnBuilder(name ?? \"\", enumInstance),\n    {\n      enumName,\n      enumValues: values,\n      schema,\n      [isPgEnumSym]: true\n    }\n  );\n  return enumInstance;\n}\nfunction pgEnumObjectWithSchema(enumName, values, schema) {\n  const enumInstance = Object.assign(\n    (name) => new PgEnumObjectColumnBuilder(name ?? \"\", enumInstance),\n    {\n      enumName,\n      enumValues: Object.values(values),\n      schema,\n      [isPgEnumSym]: true\n    }\n  );\n  return enumInstance;\n}\nexport {\n  PgEnumColumn,\n  PgEnumColumnBuilder,\n  PgEnumObjectColumn,\n  PgEnumObjectColumnBuilder,\n  isPgEnum,\n  pgEnum,\n  pgEnumObjectWithSchema,\n  pgEnumWithSchema\n};\n//# sourceMappingURL=enum.js.map","import { entityKind } from \"./entity.js\";\nclass Subquery {\n  static [entityKind] = \"Subquery\";\n  constructor(sql, fields, alias, isWith = false, usedTables = []) {\n    this._ = {\n      brand: \"Subquery\",\n      sql,\n      selectedFields: fields,\n      alias,\n      isWith,\n      usedTables\n    };\n  }\n  // getSQL(): SQL<unknown> {\n  // \treturn new SQL([this]);\n  // }\n}\nclass WithSubquery extends Subquery {\n  static [entityKind] = \"WithSubquery\";\n}\nexport {\n  Subquery,\n  WithSubquery\n};\n//# sourceMappingURL=subquery.js.map","import { iife } from \"./tracing-utils.js\";\nimport { npmVersion } from \"./version.js\";\nlet otel;\nlet rawTracer;\nconst tracer = {\n  startActiveSpan(name, fn) {\n    if (!otel) {\n      return fn();\n    }\n    if (!rawTracer) {\n      rawTracer = otel.trace.getTracer(\"drizzle-orm\", npmVersion);\n    }\n    return iife(\n      (otel2, rawTracer2) => rawTracer2.startActiveSpan(\n        name,\n        (span) => {\n          try {\n            return fn(span);\n          } catch (e) {\n            span.setStatus({\n              code: otel2.SpanStatusCode.ERROR,\n              message: e instanceof Error ? e.message : \"Unknown error\"\n              // eslint-disable-line no-instanceof/no-instanceof\n            });\n            throw e;\n          } finally {\n            span.end();\n          }\n        }\n      ),\n      otel,\n      rawTracer\n    );\n  }\n};\nexport {\n  tracer\n};\n//# sourceMappingURL=tracing.js.map","const ViewBaseConfig = Symbol.for(\"drizzle:ViewBaseConfig\");\nexport {\n  ViewBaseConfig\n};\n//# sourceMappingURL=view-common.js.map","import { entityKind } from \"./entity.js\";\nimport { TableName } from \"./table.utils.js\";\nconst Schema = Symbol.for(\"drizzle:Schema\");\nconst Columns = Symbol.for(\"drizzle:Columns\");\nconst ExtraConfigColumns = Symbol.for(\"drizzle:ExtraConfigColumns\");\nconst OriginalName = Symbol.for(\"drizzle:OriginalName\");\nconst BaseName = Symbol.for(\"drizzle:BaseName\");\nconst IsAlias = Symbol.for(\"drizzle:IsAlias\");\nconst ExtraConfigBuilder = Symbol.for(\"drizzle:ExtraConfigBuilder\");\nconst IsDrizzleTable = Symbol.for(\"drizzle:IsDrizzleTable\");\nclass Table {\n  static [entityKind] = \"Table\";\n  /** @internal */\n  static Symbol = {\n    Name: TableName,\n    Schema,\n    OriginalName,\n    Columns,\n    ExtraConfigColumns,\n    BaseName,\n    IsAlias,\n    ExtraConfigBuilder\n  };\n  /**\n   * @internal\n   * Can be changed if the table is aliased.\n   */\n  [TableName];\n  /**\n   * @internal\n   * Used to store the original name of the table, before any aliasing.\n   */\n  [OriginalName];\n  /** @internal */\n  [Schema];\n  /** @internal */\n  [Columns];\n  /** @internal */\n  [ExtraConfigColumns];\n  /**\n   *  @internal\n   * Used to store the table name before the transformation via the `tableCreator` functions.\n   */\n  [BaseName];\n  /** @internal */\n  [IsAlias] = false;\n  /** @internal */\n  [IsDrizzleTable] = true;\n  /** @internal */\n  [ExtraConfigBuilder] = void 0;\n  constructor(name, schema, baseName) {\n    this[TableName] = this[OriginalName] = name;\n    this[Schema] = schema;\n    this[BaseName] = baseName;\n  }\n}\nfunction isTable(table) {\n  return typeof table === \"object\" && table !== null && IsDrizzleTable in table;\n}\nfunction getTableName(table) {\n  return table[TableName];\n}\nfunction getTableUniqueName(table) {\n  return `${table[Schema] ?? \"public\"}.${table[TableName]}`;\n}\nexport {\n  BaseName,\n  Columns,\n  ExtraConfigBuilder,\n  ExtraConfigColumns,\n  IsAlias,\n  OriginalName,\n  Schema,\n  Table,\n  getTableName,\n  getTableUniqueName,\n  isTable\n};\n//# sourceMappingURL=table.js.map","import { entityKind, is } from \"../entity.js\";\nimport { isPgEnum } from \"../pg-core/columns/enum.js\";\nimport { Subquery } from \"../subquery.js\";\nimport { tracer } from \"../tracing.js\";\nimport { ViewBaseConfig } from \"../view-common.js\";\nimport { Column } from \"../column.js\";\nimport { IsAlias, Table } from \"../table.js\";\nclass FakePrimitiveParam {\n  static [entityKind] = \"FakePrimitiveParam\";\n}\nfunction isSQLWrapper(value) {\n  return value !== null && value !== void 0 && typeof value.getSQL === \"function\";\n}\nfunction mergeQueries(queries) {\n  const result = { sql: \"\", params: [] };\n  for (const query of queries) {\n    result.sql += query.sql;\n    result.params.push(...query.params);\n    if (query.typings?.length) {\n      if (!result.typings) {\n        result.typings = [];\n      }\n      result.typings.push(...query.typings);\n    }\n  }\n  return result;\n}\nclass StringChunk {\n  static [entityKind] = \"StringChunk\";\n  value;\n  constructor(value) {\n    this.value = Array.isArray(value) ? value : [value];\n  }\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nclass SQL {\n  constructor(queryChunks) {\n    this.queryChunks = queryChunks;\n    for (const chunk of queryChunks) {\n      if (is(chunk, Table)) {\n        const schemaName = chunk[Table.Symbol.Schema];\n        this.usedTables.push(\n          schemaName === void 0 ? chunk[Table.Symbol.Name] : schemaName + \".\" + chunk[Table.Symbol.Name]\n        );\n      }\n    }\n  }\n  static [entityKind] = \"SQL\";\n  /** @internal */\n  decoder = noopDecoder;\n  shouldInlineParams = false;\n  /** @internal */\n  usedTables = [];\n  append(query) {\n    this.queryChunks.push(...query.queryChunks);\n    return this;\n  }\n  toQuery(config) {\n    return tracer.startActiveSpan(\"drizzle.buildSQL\", (span) => {\n      const query = this.buildQueryFromSourceParams(this.queryChunks, config);\n      span?.setAttributes({\n        \"drizzle.query.text\": query.sql,\n        \"drizzle.query.params\": JSON.stringify(query.params)\n      });\n      return query;\n    });\n  }\n  buildQueryFromSourceParams(chunks, _config) {\n    const config = Object.assign({}, _config, {\n      inlineParams: _config.inlineParams || this.shouldInlineParams,\n      paramStartIndex: _config.paramStartIndex || { value: 0 }\n    });\n    const {\n      casing,\n      escapeName,\n      escapeParam,\n      prepareTyping,\n      inlineParams,\n      paramStartIndex\n    } = config;\n    return mergeQueries(chunks.map((chunk) => {\n      if (is(chunk, StringChunk)) {\n        return { sql: chunk.value.join(\"\"), params: [] };\n      }\n      if (is(chunk, Name)) {\n        return { sql: escapeName(chunk.value), params: [] };\n      }\n      if (chunk === void 0) {\n        return { sql: \"\", params: [] };\n      }\n      if (Array.isArray(chunk)) {\n        const result = [new StringChunk(\"(\")];\n        for (const [i, p] of chunk.entries()) {\n          result.push(p);\n          if (i < chunk.length - 1) {\n            result.push(new StringChunk(\", \"));\n          }\n        }\n        result.push(new StringChunk(\")\"));\n        return this.buildQueryFromSourceParams(result, config);\n      }\n      if (is(chunk, SQL)) {\n        return this.buildQueryFromSourceParams(chunk.queryChunks, {\n          ...config,\n          inlineParams: inlineParams || chunk.shouldInlineParams\n        });\n      }\n      if (is(chunk, Table)) {\n        const schemaName = chunk[Table.Symbol.Schema];\n        const tableName = chunk[Table.Symbol.Name];\n        return {\n          sql: schemaName === void 0 || chunk[IsAlias] ? escapeName(tableName) : escapeName(schemaName) + \".\" + escapeName(tableName),\n          params: []\n        };\n      }\n      if (is(chunk, Column)) {\n        const columnName = casing.getColumnCasing(chunk);\n        if (_config.invokeSource === \"indexes\") {\n          return { sql: escapeName(columnName), params: [] };\n        }\n        const schemaName = chunk.table[Table.Symbol.Schema];\n        return {\n          sql: chunk.table[IsAlias] || schemaName === void 0 ? escapeName(chunk.table[Table.Symbol.Name]) + \".\" + escapeName(columnName) : escapeName(schemaName) + \".\" + escapeName(chunk.table[Table.Symbol.Name]) + \".\" + escapeName(columnName),\n          params: []\n        };\n      }\n      if (is(chunk, View)) {\n        const schemaName = chunk[ViewBaseConfig].schema;\n        const viewName = chunk[ViewBaseConfig].name;\n        return {\n          sql: schemaName === void 0 || chunk[ViewBaseConfig].isAlias ? escapeName(viewName) : escapeName(schemaName) + \".\" + escapeName(viewName),\n          params: []\n        };\n      }\n      if (is(chunk, Param)) {\n        if (is(chunk.value, Placeholder)) {\n          return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n        }\n        const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n        if (is(mappedValue, SQL)) {\n          return this.buildQueryFromSourceParams([mappedValue], config);\n        }\n        if (inlineParams) {\n          return { sql: this.mapInlineParam(mappedValue, config), params: [] };\n        }\n        let typings = [\"none\"];\n        if (prepareTyping) {\n          typings = [prepareTyping(chunk.encoder)];\n        }\n        return { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n      }\n      if (is(chunk, Placeholder)) {\n        return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n      }\n      if (is(chunk, SQL.Aliased) && chunk.fieldAlias !== void 0) {\n        return { sql: escapeName(chunk.fieldAlias), params: [] };\n      }\n      if (is(chunk, Subquery)) {\n        if (chunk._.isWith) {\n          return { sql: escapeName(chunk._.alias), params: [] };\n        }\n        return this.buildQueryFromSourceParams([\n          new StringChunk(\"(\"),\n          chunk._.sql,\n          new StringChunk(\") \"),\n          new Name(chunk._.alias)\n        ], config);\n      }\n      if (isPgEnum(chunk)) {\n        if (chunk.schema) {\n          return { sql: escapeName(chunk.schema) + \".\" + escapeName(chunk.enumName), params: [] };\n        }\n        return { sql: escapeName(chunk.enumName), params: [] };\n      }\n      if (isSQLWrapper(chunk)) {\n        if (chunk.shouldOmitSQLParens?.()) {\n          return this.buildQueryFromSourceParams([chunk.getSQL()], config);\n        }\n        return this.buildQueryFromSourceParams([\n          new StringChunk(\"(\"),\n          chunk.getSQL(),\n          new StringChunk(\")\")\n        ], config);\n      }\n      if (inlineParams) {\n        return { sql: this.mapInlineParam(chunk, config), params: [] };\n      }\n      return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n    }));\n  }\n  mapInlineParam(chunk, { escapeString }) {\n    if (chunk === null) {\n      return \"null\";\n    }\n    if (typeof chunk === \"number\" || typeof chunk === \"boolean\") {\n      return chunk.toString();\n    }\n    if (typeof chunk === \"string\") {\n      return escapeString(chunk);\n    }\n    if (typeof chunk === \"object\") {\n      const mappedValueAsString = chunk.toString();\n      if (mappedValueAsString === \"[object Object]\") {\n        return escapeString(JSON.stringify(chunk));\n      }\n      return escapeString(mappedValueAsString);\n    }\n    throw new Error(\"Unexpected param value: \" + chunk);\n  }\n  getSQL() {\n    return this;\n  }\n  as(alias) {\n    if (alias === void 0) {\n      return this;\n    }\n    return new SQL.Aliased(this, alias);\n  }\n  mapWith(decoder) {\n    this.decoder = typeof decoder === \"function\" ? { mapFromDriverValue: decoder } : decoder;\n    return this;\n  }\n  inlineParams() {\n    this.shouldInlineParams = true;\n    return this;\n  }\n  /**\n   * This method is used to conditionally include a part of the query.\n   *\n   * @param condition - Condition to check\n   * @returns itself if the condition is `true`, otherwise `undefined`\n   */\n  if(condition) {\n    return condition ? this : void 0;\n  }\n}\nclass Name {\n  constructor(value) {\n    this.value = value;\n  }\n  static [entityKind] = \"Name\";\n  brand;\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction name(value) {\n  return new Name(value);\n}\nfunction isDriverValueEncoder(value) {\n  return typeof value === \"object\" && value !== null && \"mapToDriverValue\" in value && typeof value.mapToDriverValue === \"function\";\n}\nconst noopDecoder = {\n  mapFromDriverValue: (value) => value\n};\nconst noopEncoder = {\n  mapToDriverValue: (value) => value\n};\nconst noopMapper = {\n  ...noopDecoder,\n  ...noopEncoder\n};\nclass Param {\n  /**\n   * @param value - Parameter value\n   * @param encoder - Encoder to convert the value to a driver parameter\n   */\n  constructor(value, encoder = noopEncoder) {\n    this.value = value;\n    this.encoder = encoder;\n  }\n  static [entityKind] = \"Param\";\n  brand;\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction param(value, encoder) {\n  return new Param(value, encoder);\n}\nfunction sql(strings, ...params) {\n  const queryChunks = [];\n  if (params.length > 0 || strings.length > 0 && strings[0] !== \"\") {\n    queryChunks.push(new StringChunk(strings[0]));\n  }\n  for (const [paramIndex, param2] of params.entries()) {\n    queryChunks.push(param2, new StringChunk(strings[paramIndex + 1]));\n  }\n  return new SQL(queryChunks);\n}\n((sql2) => {\n  function empty() {\n    return new SQL([]);\n  }\n  sql2.empty = empty;\n  function fromList(list) {\n    return new SQL(list);\n  }\n  sql2.fromList = fromList;\n  function raw(str) {\n    return new SQL([new StringChunk(str)]);\n  }\n  sql2.raw = raw;\n  function join(chunks, separator) {\n    const result = [];\n    for (const [i, chunk] of chunks.entries()) {\n      if (i > 0 && separator !== void 0) {\n        result.push(separator);\n      }\n      result.push(chunk);\n    }\n    return new SQL(result);\n  }\n  sql2.join = join;\n  function identifier(value) {\n    return new Name(value);\n  }\n  sql2.identifier = identifier;\n  function placeholder2(name2) {\n    return new Placeholder(name2);\n  }\n  sql2.placeholder = placeholder2;\n  function param2(value, encoder) {\n    return new Param(value, encoder);\n  }\n  sql2.param = param2;\n})(sql || (sql = {}));\n((SQL2) => {\n  class Aliased {\n    constructor(sql2, fieldAlias) {\n      this.sql = sql2;\n      this.fieldAlias = fieldAlias;\n    }\n    static [entityKind] = \"SQL.Aliased\";\n    /** @internal */\n    isSelectionField = false;\n    getSQL() {\n      return this.sql;\n    }\n    /** @internal */\n    clone() {\n      return new Aliased(this.sql, this.fieldAlias);\n    }\n  }\n  SQL2.Aliased = Aliased;\n})(SQL || (SQL = {}));\nclass Placeholder {\n  constructor(name2) {\n    this.name = name2;\n  }\n  static [entityKind] = \"Placeholder\";\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction placeholder(name2) {\n  return new Placeholder(name2);\n}\nfunction fillPlaceholders(params, values) {\n  return params.map((p) => {\n    if (is(p, Placeholder)) {\n      if (!(p.name in values)) {\n        throw new Error(`No value for placeholder \"${p.name}\" was provided`);\n      }\n      return values[p.name];\n    }\n    if (is(p, Param) && is(p.value, Placeholder)) {\n      if (!(p.value.name in values)) {\n        throw new Error(`No value for placeholder \"${p.value.name}\" was provided`);\n      }\n      return p.encoder.mapToDriverValue(values[p.value.name]);\n    }\n    return p;\n  });\n}\nconst IsDrizzleView = Symbol.for(\"drizzle:IsDrizzleView\");\nclass View {\n  static [entityKind] = \"View\";\n  /** @internal */\n  [ViewBaseConfig];\n  /** @internal */\n  [IsDrizzleView] = true;\n  constructor({ name: name2, schema, selectedFields, query }) {\n    this[ViewBaseConfig] = {\n      name: name2,\n      originalName: name2,\n      schema,\n      selectedFields,\n      query,\n      isExisting: !query,\n      isAlias: false\n    };\n  }\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction isView(view) {\n  return typeof view === \"object\" && view !== null && IsDrizzleView in view;\n}\nfunction getViewName(view) {\n  return view[ViewBaseConfig].name;\n}\nColumn.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nTable.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nSubquery.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nexport {\n  FakePrimitiveParam,\n  Name,\n  Param,\n  Placeholder,\n  SQL,\n  StringChunk,\n  View,\n  fillPlaceholders,\n  getViewName,\n  isDriverValueEncoder,\n  isSQLWrapper,\n  isView,\n  name,\n  noopDecoder,\n  noopEncoder,\n  noopMapper,\n  param,\n  placeholder,\n  sql\n};\n//# sourceMappingURL=sql.js.map","import { Column } from \"./column.js\";\nimport { entityKind, is } from \"./entity.js\";\nimport { SQL, sql } from \"./sql/sql.js\";\nimport { Table } from \"./table.js\";\nimport { ViewBaseConfig } from \"./view-common.js\";\nclass ColumnAliasProxyHandler {\n  constructor(table) {\n    this.table = table;\n  }\n  static [entityKind] = \"ColumnAliasProxyHandler\";\n  get(columnObj, prop) {\n    if (prop === \"table\") {\n      return this.table;\n    }\n    return columnObj[prop];\n  }\n}\nclass TableAliasProxyHandler {\n  constructor(alias, replaceOriginalName) {\n    this.alias = alias;\n    this.replaceOriginalName = replaceOriginalName;\n  }\n  static [entityKind] = \"TableAliasProxyHandler\";\n  get(target, prop) {\n    if (prop === Table.Symbol.IsAlias) {\n      return true;\n    }\n    if (prop === Table.Symbol.Name) {\n      return this.alias;\n    }\n    if (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n      return this.alias;\n    }\n    if (prop === ViewBaseConfig) {\n      return {\n        ...target[ViewBaseConfig],\n        name: this.alias,\n        isAlias: true\n      };\n    }\n    if (prop === Table.Symbol.Columns) {\n      const columns = target[Table.Symbol.Columns];\n      if (!columns) {\n        return columns;\n      }\n      const proxiedColumns = {};\n      Object.keys(columns).map((key) => {\n        proxiedColumns[key] = new Proxy(\n          columns[key],\n          new ColumnAliasProxyHandler(new Proxy(target, this))\n        );\n      });\n      return proxiedColumns;\n    }\n    const value = target[prop];\n    if (is(value, Column)) {\n      return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(target, this)));\n    }\n    return value;\n  }\n}\nclass RelationTableAliasProxyHandler {\n  constructor(alias) {\n    this.alias = alias;\n  }\n  static [entityKind] = \"RelationTableAliasProxyHandler\";\n  get(target, prop) {\n    if (prop === \"sourceTable\") {\n      return aliasedTable(target.sourceTable, this.alias);\n    }\n    return target[prop];\n  }\n}\nfunction aliasedTable(table, tableAlias) {\n  return new Proxy(table, new TableAliasProxyHandler(tableAlias, false));\n}\nfunction aliasedRelation(relation, tableAlias) {\n  return new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\nfunction aliasedTableColumn(column, tableAlias) {\n  return new Proxy(\n    column,\n    new ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false)))\n  );\n}\nfunction mapColumnsInAliasedSQLToAlias(query, alias) {\n  return new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\nfunction mapColumnsInSQLToAlias(query, alias) {\n  return sql.join(query.queryChunks.map((c) => {\n    if (is(c, Column)) {\n      return aliasedTableColumn(c, alias);\n    }\n    if (is(c, SQL)) {\n      return mapColumnsInSQLToAlias(c, alias);\n    }\n    if (is(c, SQL.Aliased)) {\n      return mapColumnsInAliasedSQLToAlias(c, alias);\n    }\n    return c;\n  }));\n}\nexport {\n  ColumnAliasProxyHandler,\n  RelationTableAliasProxyHandler,\n  TableAliasProxyHandler,\n  aliasedRelation,\n  aliasedTable,\n  aliasedTableColumn,\n  mapColumnsInAliasedSQLToAlias,\n  mapColumnsInSQLToAlias\n};\n//# sourceMappingURL=alias.js.map","import { entityKind } from \"./entity.js\";\nclass DrizzleError extends Error {\n  static [entityKind] = \"DrizzleError\";\n  constructor({ message, cause }) {\n    super(message);\n    this.name = \"DrizzleError\";\n    this.cause = cause;\n  }\n}\nclass DrizzleQueryError extends Error {\n  constructor(query, params, cause) {\n    super(`Failed query: ${query}\nparams: ${params}`);\n    this.query = query;\n    this.params = params;\n    this.cause = cause;\n    Error.captureStackTrace(this, DrizzleQueryError);\n    if (cause) this.cause = cause;\n  }\n}\nclass TransactionRollbackError extends DrizzleError {\n  static [entityKind] = \"TransactionRollbackError\";\n  constructor() {\n    super({ message: \"Rollback\" });\n  }\n}\nexport {\n  DrizzleError,\n  DrizzleQueryError,\n  TransactionRollbackError\n};\n//# sourceMappingURL=errors.js.map","import { entityKind } from \"./entity.js\";\nclass ConsoleLogWriter {\n  static [entityKind] = \"ConsoleLogWriter\";\n  write(message) {\n    console.log(message);\n  }\n}\nclass DefaultLogger {\n  static [entityKind] = \"DefaultLogger\";\n  writer;\n  constructor(config) {\n    this.writer = config?.writer ?? new ConsoleLogWriter();\n  }\n  logQuery(query, params) {\n    const stringifiedParams = params.map((p) => {\n      try {\n        return JSON.stringify(p);\n      } catch {\n        return String(p);\n      }\n    });\n    const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(\", \")}]` : \"\";\n    this.writer.write(`Query: ${query}${paramsStr}`);\n  }\n}\nclass NoopLogger {\n  static [entityKind] = \"NoopLogger\";\n  logQuery() {\n  }\n}\nexport {\n  ConsoleLogWriter,\n  DefaultLogger,\n  NoopLogger\n};\n//# sourceMappingURL=logger.js.map","import { entityKind } from \"./entity.js\";\nclass QueryPromise {\n  static [entityKind] = \"QueryPromise\";\n  [Symbol.toStringTag] = \"QueryPromise\";\n  catch(onRejected) {\n    return this.then(void 0, onRejected);\n  }\n  finally(onFinally) {\n    return this.then(\n      (value) => {\n        onFinally?.();\n        return value;\n      },\n      (reason) => {\n        onFinally?.();\n        throw reason;\n      }\n    );\n  }\n  then(onFulfilled, onRejected) {\n    return this.execute().then(onFulfilled, onRejected);\n  }\n}\nexport {\n  QueryPromise\n};\n//# sourceMappingURL=query-promise.js.map","import { Column } from \"./column.js\";\nimport { is } from \"./entity.js\";\nimport { Param, SQL, View } from \"./sql/sql.js\";\nimport { Subquery } from \"./subquery.js\";\nimport { getTableName, Table } from \"./table.js\";\nimport { ViewBaseConfig } from \"./view-common.js\";\nfunction mapResultRow(columns, row, joinsNotNullableMap) {\n  const nullifyMap = {};\n  const result = columns.reduce(\n    (result2, { path, field }, columnIndex) => {\n      let decoder;\n      if (is(field, Column)) {\n        decoder = field;\n      } else if (is(field, SQL)) {\n        decoder = field.decoder;\n      } else {\n        decoder = field.sql.decoder;\n      }\n      let node = result2;\n      for (const [pathChunkIndex, pathChunk] of path.entries()) {\n        if (pathChunkIndex < path.length - 1) {\n          if (!(pathChunk in node)) {\n            node[pathChunk] = {};\n          }\n          node = node[pathChunk];\n        } else {\n          const rawValue = row[columnIndex];\n          const value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n          if (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n            const objectName = path[0];\n            if (!(objectName in nullifyMap)) {\n              nullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n            } else if (typeof nullifyMap[objectName] === \"string\" && nullifyMap[objectName] !== getTableName(field.table)) {\n              nullifyMap[objectName] = false;\n            }\n          }\n        }\n      }\n      return result2;\n    },\n    {}\n  );\n  if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n    for (const [objectName, tableName] of Object.entries(nullifyMap)) {\n      if (typeof tableName === \"string\" && !joinsNotNullableMap[tableName]) {\n        result[objectName] = null;\n      }\n    }\n  }\n  return result;\n}\nfunction orderSelectedFields(fields, pathPrefix) {\n  return Object.entries(fields).reduce((result, [name, field]) => {\n    if (typeof name !== \"string\") {\n      return result;\n    }\n    const newPath = pathPrefix ? [...pathPrefix, name] : [name];\n    if (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n      result.push({ path: newPath, field });\n    } else if (is(field, Table)) {\n      result.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n    } else {\n      result.push(...orderSelectedFields(field, newPath));\n    }\n    return result;\n  }, []);\n}\nfunction haveSameKeys(left, right) {\n  const leftKeys = Object.keys(left);\n  const rightKeys = Object.keys(right);\n  if (leftKeys.length !== rightKeys.length) {\n    return false;\n  }\n  for (const [index, key] of leftKeys.entries()) {\n    if (key !== rightKeys[index]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction mapUpdateSet(table, values) {\n  const entries = Object.entries(values).filter(([, value]) => value !== void 0).map(([key, value]) => {\n    if (is(value, SQL) || is(value, Column)) {\n      return [key, value];\n    } else {\n      return [key, new Param(value, table[Table.Symbol.Columns][key])];\n    }\n  });\n  if (entries.length === 0) {\n    throw new Error(\"No values to set\");\n  }\n  return Object.fromEntries(entries);\n}\nfunction applyMixins(baseClass, extendedClasses) {\n  for (const extendedClass of extendedClasses) {\n    for (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n      if (name === \"constructor\") continue;\n      Object.defineProperty(\n        baseClass.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(extendedClass.prototype, name) || /* @__PURE__ */ Object.create(null)\n      );\n    }\n  }\n}\nfunction getTableColumns(table) {\n  return table[Table.Symbol.Columns];\n}\nfunction getViewSelectedFields(view) {\n  return view[ViewBaseConfig].selectedFields;\n}\nfunction getTableLikeName(table) {\n  return is(table, Subquery) ? table._.alias : is(table, View) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : table[Table.Symbol.IsAlias] ? table[Table.Symbol.Name] : table[Table.Symbol.BaseName];\n}\nfunction getColumnNameAndConfig(a, b) {\n  return {\n    name: typeof a === \"string\" && a.length > 0 ? a : \"\",\n    config: typeof a === \"object\" ? a : b\n  };\n}\nconst _ = {};\nconst __ = {};\nfunction isConfig(data) {\n  if (typeof data !== \"object\" || data === null) return false;\n  if (data.constructor.name !== \"Object\") return false;\n  if (\"logger\" in data) {\n    const type = typeof data[\"logger\"];\n    if (type !== \"boolean\" && (type !== \"object\" || typeof data[\"logger\"][\"logQuery\"] !== \"function\") && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"schema\" in data) {\n    const type = typeof data[\"schema\"];\n    if (type !== \"object\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"casing\" in data) {\n    const type = typeof data[\"casing\"];\n    if (type !== \"string\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"mode\" in data) {\n    if (data[\"mode\"] !== \"default\" || data[\"mode\"] !== \"planetscale\" || data[\"mode\"] !== void 0) return false;\n    return true;\n  }\n  if (\"connection\" in data) {\n    const type = typeof data[\"connection\"];\n    if (type !== \"string\" && type !== \"object\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"client\" in data) {\n    const type = typeof data[\"client\"];\n    if (type !== \"object\" && type !== \"function\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (Object.keys(data).length === 0) return true;\n  return false;\n}\nconst textDecoder = typeof TextDecoder === \"undefined\" ? null : new TextDecoder();\nexport {\n  applyMixins,\n  getColumnNameAndConfig,\n  getTableColumns,\n  getTableLikeName,\n  getViewSelectedFields,\n  haveSameKeys,\n  isConfig,\n  mapResultRow,\n  mapUpdateSet,\n  orderSelectedFields,\n  textDecoder\n};\n//# sourceMappingURL=utils.js.map","import { entityKind } from \"../entity.js\";\nimport { Table } from \"../table.js\";\nimport { getPgColumnBuilders } from \"./columns/all.js\";\nconst InlineForeignKeys = Symbol.for(\"drizzle:PgInlineForeignKeys\");\nconst EnableRLS = Symbol.for(\"drizzle:EnableRLS\");\nclass PgTable extends Table {\n  static [entityKind] = \"PgTable\";\n  /** @internal */\n  static Symbol = Object.assign({}, Table.Symbol, {\n    InlineForeignKeys,\n    EnableRLS\n  });\n  /**@internal */\n  [InlineForeignKeys] = [];\n  /** @internal */\n  [EnableRLS] = false;\n  /** @internal */\n  [Table.Symbol.ExtraConfigBuilder] = void 0;\n  /** @internal */\n  [Table.Symbol.ExtraConfigColumns] = {};\n}\nfunction pgTableWithSchema(name, columns, extraConfig, schema, baseName = name) {\n  const rawTable = new PgTable(name, schema, baseName);\n  const parsedColumns = typeof columns === \"function\" ? columns(getPgColumnBuilders()) : columns;\n  const builtColumns = Object.fromEntries(\n    Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {\n      const colBuilder = colBuilderBase;\n      colBuilder.setName(name2);\n      const column = colBuilder.build(rawTable);\n      rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n      return [name2, column];\n    })\n  );\n  const builtColumnsForExtraConfig = Object.fromEntries(\n    Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {\n      const colBuilder = colBuilderBase;\n      colBuilder.setName(name2);\n      const column = colBuilder.buildExtraConfigColumn(rawTable);\n      return [name2, column];\n    })\n  );\n  const table = Object.assign(rawTable, builtColumns);\n  table[Table.Symbol.Columns] = builtColumns;\n  table[Table.Symbol.ExtraConfigColumns] = builtColumnsForExtraConfig;\n  if (extraConfig) {\n    table[PgTable.Symbol.ExtraConfigBuilder] = extraConfig;\n  }\n  return Object.assign(table, {\n    enableRLS: () => {\n      table[PgTable.Symbol.EnableRLS] = true;\n      return table;\n    }\n  });\n}\nconst pgTable = (name, columns, extraConfig) => {\n  return pgTableWithSchema(name, columns, extraConfig, void 0);\n};\nfunction pgTableCreator(customizeTableName) {\n  return (name, columns, extraConfig) => {\n    return pgTableWithSchema(customizeTableName(name), columns, extraConfig, void 0, name);\n  };\n}\nexport {\n  EnableRLS,\n  InlineForeignKeys,\n  PgTable,\n  pgTable,\n  pgTableCreator,\n  pgTableWithSchema\n};\n//# sourceMappingURL=table.js.map","import { entityKind } from \"../entity.js\";\nimport { PgTable } from \"./table.js\";\nfunction primaryKey(...config) {\n  if (config[0].columns) {\n    return new PrimaryKeyBuilder(config[0].columns, config[0].name);\n  }\n  return new PrimaryKeyBuilder(config);\n}\nclass PrimaryKeyBuilder {\n  static [entityKind] = \"PgPrimaryKeyBuilder\";\n  /** @internal */\n  columns;\n  /** @internal */\n  name;\n  constructor(columns, name) {\n    this.columns = columns;\n    this.name = name;\n  }\n  /** @internal */\n  build(table) {\n    return new PrimaryKey(table, this.columns, this.name);\n  }\n}\nclass PrimaryKey {\n  constructor(table, columns, name) {\n    this.table = table;\n    this.columns = columns;\n    this.name = name;\n  }\n  static [entityKind] = \"PgPrimaryKey\";\n  columns;\n  name;\n  getName() {\n    return this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join(\"_\")}_pk`;\n  }\n}\nexport {\n  PrimaryKey,\n  PrimaryKeyBuilder,\n  primaryKey\n};\n//# sourceMappingURL=primary-keys.js.map","import { Column } from \"../../column.js\";\nimport { is } from \"../../entity.js\";\nimport { Table } from \"../../table.js\";\nimport {\n  isDriverValueEncoder,\n  isSQLWrapper,\n  Param,\n  Placeholder,\n  SQL,\n  sql,\n  StringChunk,\n  View\n} from \"../sql.js\";\nfunction bindIfParam(value, column) {\n  if (isDriverValueEncoder(column) && !isSQLWrapper(value) && !is(value, Param) && !is(value, Placeholder) && !is(value, Column) && !is(value, Table) && !is(value, View)) {\n    return new Param(value, column);\n  }\n  return value;\n}\nconst eq = (left, right) => {\n  return sql`${left} = ${bindIfParam(right, left)}`;\n};\nconst ne = (left, right) => {\n  return sql`${left} <> ${bindIfParam(right, left)}`;\n};\nfunction and(...unfilteredConditions) {\n  const conditions = unfilteredConditions.filter(\n    (c) => c !== void 0\n  );\n  if (conditions.length === 0) {\n    return void 0;\n  }\n  if (conditions.length === 1) {\n    return new SQL(conditions);\n  }\n  return new SQL([\n    new StringChunk(\"(\"),\n    sql.join(conditions, new StringChunk(\" and \")),\n    new StringChunk(\")\")\n  ]);\n}\nfunction or(...unfilteredConditions) {\n  const conditions = unfilteredConditions.filter(\n    (c) => c !== void 0\n  );\n  if (conditions.length === 0) {\n    return void 0;\n  }\n  if (conditions.length === 1) {\n    return new SQL(conditions);\n  }\n  return new SQL([\n    new StringChunk(\"(\"),\n    sql.join(conditions, new StringChunk(\" or \")),\n    new StringChunk(\")\")\n  ]);\n}\nfunction not(condition) {\n  return sql`not ${condition}`;\n}\nconst gt = (left, right) => {\n  return sql`${left} > ${bindIfParam(right, left)}`;\n};\nconst gte = (left, right) => {\n  return sql`${left} >= ${bindIfParam(right, left)}`;\n};\nconst lt = (left, right) => {\n  return sql`${left} < ${bindIfParam(right, left)}`;\n};\nconst lte = (left, right) => {\n  return sql`${left} <= ${bindIfParam(right, left)}`;\n};\nfunction inArray(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      return sql`false`;\n    }\n    return sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;\n  }\n  return sql`${column} in ${bindIfParam(values, column)}`;\n}\nfunction notInArray(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      return sql`true`;\n    }\n    return sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n  }\n  return sql`${column} not in ${bindIfParam(values, column)}`;\n}\nfunction isNull(value) {\n  return sql`${value} is null`;\n}\nfunction isNotNull(value) {\n  return sql`${value} is not null`;\n}\nfunction exists(subquery) {\n  return sql`exists ${subquery}`;\n}\nfunction notExists(subquery) {\n  return sql`not exists ${subquery}`;\n}\nfunction between(column, min, max) {\n  return sql`${column} between ${bindIfParam(min, column)} and ${bindIfParam(\n    max,\n    column\n  )}`;\n}\nfunction notBetween(column, min, max) {\n  return sql`${column} not between ${bindIfParam(\n    min,\n    column\n  )} and ${bindIfParam(max, column)}`;\n}\nfunction like(column, value) {\n  return sql`${column} like ${value}`;\n}\nfunction notLike(column, value) {\n  return sql`${column} not like ${value}`;\n}\nfunction ilike(column, value) {\n  return sql`${column} ilike ${value}`;\n}\nfunction notIlike(column, value) {\n  return sql`${column} not ilike ${value}`;\n}\nfunction arrayContains(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayContains requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} @> ${array}`;\n  }\n  return sql`${column} @> ${bindIfParam(values, column)}`;\n}\nfunction arrayContained(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayContained requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} <@ ${array}`;\n  }\n  return sql`${column} <@ ${bindIfParam(values, column)}`;\n}\nfunction arrayOverlaps(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayOverlaps requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} && ${array}`;\n  }\n  return sql`${column} && ${bindIfParam(values, column)}`;\n}\nexport {\n  and,\n  arrayContained,\n  arrayContains,\n  arrayOverlaps,\n  between,\n  bindIfParam,\n  eq,\n  exists,\n  gt,\n  gte,\n  ilike,\n  inArray,\n  isNotNull,\n  isNull,\n  like,\n  lt,\n  lte,\n  ne,\n  not,\n  notBetween,\n  notExists,\n  notIlike,\n  notInArray,\n  notLike,\n  or\n};\n//# sourceMappingURL=conditions.js.map","import { sql } from \"../sql.js\";\nfunction asc(column) {\n  return sql`${column} asc`;\n}\nfunction desc(column) {\n  return sql`${column} desc`;\n}\nexport {\n  asc,\n  desc\n};\n//# sourceMappingURL=select.js.map","import { getTableUniqueName, Table } from \"./table.js\";\nimport { Column } from \"./column.js\";\nimport { entityKind, is } from \"./entity.js\";\nimport { PrimaryKeyBuilder } from \"./pg-core/primary-keys.js\";\nimport {\n  and,\n  asc,\n  between,\n  desc,\n  eq,\n  exists,\n  gt,\n  gte,\n  ilike,\n  inArray,\n  isNotNull,\n  isNull,\n  like,\n  lt,\n  lte,\n  ne,\n  not,\n  notBetween,\n  notExists,\n  notIlike,\n  notInArray,\n  notLike,\n  or\n} from \"./sql/expressions/index.js\";\nimport { SQL, sql } from \"./sql/sql.js\";\nclass Relation {\n  constructor(sourceTable, referencedTable, relationName) {\n    this.sourceTable = sourceTable;\n    this.referencedTable = referencedTable;\n    this.relationName = relationName;\n    this.referencedTableName = referencedTable[Table.Symbol.Name];\n  }\n  static [entityKind] = \"Relation\";\n  referencedTableName;\n  fieldName;\n}\nclass Relations {\n  constructor(table, config) {\n    this.table = table;\n    this.config = config;\n  }\n  static [entityKind] = \"Relations\";\n}\nclass One extends Relation {\n  constructor(sourceTable, referencedTable, config, isNullable) {\n    super(sourceTable, referencedTable, config?.relationName);\n    this.config = config;\n    this.isNullable = isNullable;\n  }\n  static [entityKind] = \"One\";\n  withFieldName(fieldName) {\n    const relation = new One(\n      this.sourceTable,\n      this.referencedTable,\n      this.config,\n      this.isNullable\n    );\n    relation.fieldName = fieldName;\n    return relation;\n  }\n}\nclass Many extends Relation {\n  constructor(sourceTable, referencedTable, config) {\n    super(sourceTable, referencedTable, config?.relationName);\n    this.config = config;\n  }\n  static [entityKind] = \"Many\";\n  withFieldName(fieldName) {\n    const relation = new Many(\n      this.sourceTable,\n      this.referencedTable,\n      this.config\n    );\n    relation.fieldName = fieldName;\n    return relation;\n  }\n}\nfunction getOperators() {\n  return {\n    and,\n    between,\n    eq,\n    exists,\n    gt,\n    gte,\n    ilike,\n    inArray,\n    isNull,\n    isNotNull,\n    like,\n    lt,\n    lte,\n    ne,\n    not,\n    notBetween,\n    notExists,\n    notLike,\n    notIlike,\n    notInArray,\n    or,\n    sql\n  };\n}\nfunction getOrderByOperators() {\n  return {\n    sql,\n    asc,\n    desc\n  };\n}\nfunction extractTablesRelationalConfig(schema, configHelpers) {\n  if (Object.keys(schema).length === 1 && \"default\" in schema && !is(schema[\"default\"], Table)) {\n    schema = schema[\"default\"];\n  }\n  const tableNamesMap = {};\n  const relationsBuffer = {};\n  const tablesConfig = {};\n  for (const [key, value] of Object.entries(schema)) {\n    if (is(value, Table)) {\n      const dbName = getTableUniqueName(value);\n      const bufferedRelations = relationsBuffer[dbName];\n      tableNamesMap[dbName] = key;\n      tablesConfig[key] = {\n        tsName: key,\n        dbName: value[Table.Symbol.Name],\n        schema: value[Table.Symbol.Schema],\n        columns: value[Table.Symbol.Columns],\n        relations: bufferedRelations?.relations ?? {},\n        primaryKey: bufferedRelations?.primaryKey ?? []\n      };\n      for (const column of Object.values(\n        value[Table.Symbol.Columns]\n      )) {\n        if (column.primary) {\n          tablesConfig[key].primaryKey.push(column);\n        }\n      }\n      const extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.(value[Table.Symbol.ExtraConfigColumns]);\n      if (extraConfig) {\n        for (const configEntry of Object.values(extraConfig)) {\n          if (is(configEntry, PrimaryKeyBuilder)) {\n            tablesConfig[key].primaryKey.push(...configEntry.columns);\n          }\n        }\n      }\n    } else if (is(value, Relations)) {\n      const dbName = getTableUniqueName(value.table);\n      const tableName = tableNamesMap[dbName];\n      const relations2 = value.config(\n        configHelpers(value.table)\n      );\n      let primaryKey;\n      for (const [relationName, relation] of Object.entries(relations2)) {\n        if (tableName) {\n          const tableConfig = tablesConfig[tableName];\n          tableConfig.relations[relationName] = relation;\n          if (primaryKey) {\n            tableConfig.primaryKey.push(...primaryKey);\n          }\n        } else {\n          if (!(dbName in relationsBuffer)) {\n            relationsBuffer[dbName] = {\n              relations: {},\n              primaryKey\n            };\n          }\n          relationsBuffer[dbName].relations[relationName] = relation;\n        }\n      }\n    }\n  }\n  return { tables: tablesConfig, tableNamesMap };\n}\nfunction relations(table, relations2) {\n  return new Relations(\n    table,\n    (helpers) => Object.fromEntries(\n      Object.entries(relations2(helpers)).map(([key, value]) => [\n        key,\n        value.withFieldName(key)\n      ])\n    )\n  );\n}\nfunction createOne(sourceTable) {\n  return function one(table, config) {\n    return new One(\n      sourceTable,\n      table,\n      config,\n      config?.fields.reduce((res, f) => res && f.notNull, true) ?? false\n    );\n  };\n}\nfunction createMany(sourceTable) {\n  return function many(referencedTable, config) {\n    return new Many(sourceTable, referencedTable, config);\n  };\n}\nfunction normalizeRelation(schema, tableNamesMap, relation) {\n  if (is(relation, One) && relation.config) {\n    return {\n      fields: relation.config.fields,\n      references: relation.config.references\n    };\n  }\n  const referencedTableTsName = tableNamesMap[getTableUniqueName(relation.referencedTable)];\n  if (!referencedTableTsName) {\n    throw new Error(\n      `Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`\n    );\n  }\n  const referencedTableConfig = schema[referencedTableTsName];\n  if (!referencedTableConfig) {\n    throw new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n  }\n  const sourceTable = relation.sourceTable;\n  const sourceTableTsName = tableNamesMap[getTableUniqueName(sourceTable)];\n  if (!sourceTableTsName) {\n    throw new Error(\n      `Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`\n    );\n  }\n  const reverseRelations = [];\n  for (const referencedTableRelation of Object.values(\n    referencedTableConfig.relations\n  )) {\n    if (relation.relationName && relation !== referencedTableRelation && referencedTableRelation.relationName === relation.relationName || !relation.relationName && referencedTableRelation.referencedTable === relation.sourceTable) {\n      reverseRelations.push(referencedTableRelation);\n    }\n  }\n  if (reverseRelations.length > 1) {\n    throw relation.relationName ? new Error(\n      `There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`\n    ) : new Error(\n      `There are multiple relations between \"${referencedTableTsName}\" and \"${relation.sourceTable[Table.Symbol.Name]}\". Please specify relation name`\n    );\n  }\n  if (reverseRelations[0] && is(reverseRelations[0], One) && reverseRelations[0].config) {\n    return {\n      fields: reverseRelations[0].config.references,\n      references: reverseRelations[0].config.fields\n    };\n  }\n  throw new Error(\n    `There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`\n  );\n}\nfunction createTableRelationsHelpers(sourceTable) {\n  return {\n    one: createOne(sourceTable),\n    many: createMany(sourceTable)\n  };\n}\nfunction mapRelationalRow(tablesConfig, tableConfig, row, buildQueryResultSelection, mapColumnValue = (value) => value) {\n  const result = {};\n  for (const [\n    selectionItemIndex,\n    selectionItem\n  ] of buildQueryResultSelection.entries()) {\n    if (selectionItem.isJson) {\n      const relation = tableConfig.relations[selectionItem.tsKey];\n      const rawSubRows = row[selectionItemIndex];\n      const subRows = typeof rawSubRows === \"string\" ? JSON.parse(rawSubRows) : rawSubRows;\n      result[selectionItem.tsKey] = is(relation, One) ? subRows && mapRelationalRow(\n        tablesConfig,\n        tablesConfig[selectionItem.relationTableTsKey],\n        subRows,\n        selectionItem.selection,\n        mapColumnValue\n      ) : subRows.map(\n        (subRow) => mapRelationalRow(\n          tablesConfig,\n          tablesConfig[selectionItem.relationTableTsKey],\n          subRow,\n          selectionItem.selection,\n          mapColumnValue\n        )\n      );\n    } else {\n      const value = mapColumnValue(row[selectionItemIndex]);\n      const field = selectionItem.field;\n      let decoder;\n      if (is(field, Column)) {\n        decoder = field;\n      } else if (is(field, SQL)) {\n        decoder = field.decoder;\n      } else {\n        decoder = field.sql.decoder;\n      }\n      result[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n    }\n  }\n  return result;\n}\nexport {\n  Many,\n  One,\n  Relation,\n  Relations,\n  createMany,\n  createOne,\n  createTableRelationsHelpers,\n  extractTablesRelationalConfig,\n  getOperators,\n  getOrderByOperators,\n  mapRelationalRow,\n  normalizeRelation,\n  relations\n};\n//# sourceMappingURL=relations.js.map","import { ColumnAliasProxyHandler, TableAliasProxyHandler } from \"./alias.js\";\nimport { Column } from \"./column.js\";\nimport { entityKind, is } from \"./entity.js\";\nimport { SQL, View } from \"./sql/sql.js\";\nimport { Subquery } from \"./subquery.js\";\nimport { ViewBaseConfig } from \"./view-common.js\";\nclass SelectionProxyHandler {\n  static [entityKind] = \"SelectionProxyHandler\";\n  config;\n  constructor(config) {\n    this.config = { ...config };\n  }\n  get(subquery, prop) {\n    if (prop === \"_\") {\n      return {\n        ...subquery[\"_\"],\n        selectedFields: new Proxy(\n          subquery._.selectedFields,\n          this\n        )\n      };\n    }\n    if (prop === ViewBaseConfig) {\n      return {\n        ...subquery[ViewBaseConfig],\n        selectedFields: new Proxy(\n          subquery[ViewBaseConfig].selectedFields,\n          this\n        )\n      };\n    }\n    if (typeof prop === \"symbol\") {\n      return subquery[prop];\n    }\n    const columns = is(subquery, Subquery) ? subquery._.selectedFields : is(subquery, View) ? subquery[ViewBaseConfig].selectedFields : subquery;\n    const value = columns[prop];\n    if (is(value, SQL.Aliased)) {\n      if (this.config.sqlAliasedBehavior === \"sql\" && !value.isSelectionField) {\n        return value.sql;\n      }\n      const newValue = value.clone();\n      newValue.isSelectionField = true;\n      return newValue;\n    }\n    if (is(value, SQL)) {\n      if (this.config.sqlBehavior === \"sql\") {\n        return value;\n      }\n      throw new Error(\n        `You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`\n      );\n    }\n    if (is(value, Column)) {\n      if (this.config.alias) {\n        return new Proxy(\n          value,\n          new ColumnAliasProxyHandler(\n            new Proxy(\n              value.table,\n              new TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false)\n            )\n          )\n        );\n      }\n      return value;\n    }\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n    return new Proxy(value, new SelectionProxyHandler(this.config));\n  }\n}\nexport {\n  SelectionProxyHandler\n};\n//# sourceMappingURL=selection-proxy.js.map","import { entityKind } from \"../entity.js\";\nimport { TableName } from \"../table.utils.js\";\nclass ForeignKeyBuilder {\n  static [entityKind] = \"SQLiteForeignKeyBuilder\";\n  /** @internal */\n  reference;\n  /** @internal */\n  _onUpdate;\n  /** @internal */\n  _onDelete;\n  constructor(config, actions) {\n    this.reference = () => {\n      const { name, columns, foreignColumns } = config();\n      return { name, columns, foreignTable: foreignColumns[0].table, foreignColumns };\n    };\n    if (actions) {\n      this._onUpdate = actions.onUpdate;\n      this._onDelete = actions.onDelete;\n    }\n  }\n  onUpdate(action) {\n    this._onUpdate = action;\n    return this;\n  }\n  onDelete(action) {\n    this._onDelete = action;\n    return this;\n  }\n  /** @internal */\n  build(table) {\n    return new ForeignKey(table, this);\n  }\n}\nclass ForeignKey {\n  constructor(table, builder) {\n    this.table = table;\n    this.reference = builder.reference;\n    this.onUpdate = builder._onUpdate;\n    this.onDelete = builder._onDelete;\n  }\n  static [entityKind] = \"SQLiteForeignKey\";\n  reference;\n  onUpdate;\n  onDelete;\n  getName() {\n    const { name, columns, foreignColumns } = this.reference();\n    const columnNames = columns.map((column) => column.name);\n    const foreignColumnNames = foreignColumns.map((column) => column.name);\n    const chunks = [\n      this.table[TableName],\n      ...columnNames,\n      foreignColumns[0].table[TableName],\n      ...foreignColumnNames\n    ];\n    return name ?? `${chunks.join(\"_\")}_fk`;\n  }\n}\nfunction foreignKey(config) {\n  function mappedConfig() {\n    if (typeof config === \"function\") {\n      const { name, columns, foreignColumns } = config();\n      return {\n        name,\n        columns,\n        foreignColumns\n      };\n    }\n    return config;\n  }\n  return new ForeignKeyBuilder(mappedConfig);\n}\nexport {\n  ForeignKey,\n  ForeignKeyBuilder,\n  foreignKey\n};\n//# sourceMappingURL=foreign-keys.js.map","import { entityKind } from \"../entity.js\";\nimport { TableName } from \"../table.utils.js\";\nfunction uniqueKeyName(table, columns) {\n  return `${table[TableName]}_${columns.join(\"_\")}_unique`;\n}\nfunction unique(name) {\n  return new UniqueOnConstraintBuilder(name);\n}\nclass UniqueConstraintBuilder {\n  constructor(columns, name) {\n    this.name = name;\n    this.columns = columns;\n  }\n  static [entityKind] = \"SQLiteUniqueConstraintBuilder\";\n  /** @internal */\n  columns;\n  /** @internal */\n  build(table) {\n    return new UniqueConstraint(table, this.columns, this.name);\n  }\n}\nclass UniqueOnConstraintBuilder {\n  static [entityKind] = \"SQLiteUniqueOnConstraintBuilder\";\n  /** @internal */\n  name;\n  constructor(name) {\n    this.name = name;\n  }\n  on(...columns) {\n    return new UniqueConstraintBuilder(columns, this.name);\n  }\n}\nclass UniqueConstraint {\n  constructor(table, columns, name) {\n    this.table = table;\n    this.columns = columns;\n    this.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n  }\n  static [entityKind] = \"SQLiteUniqueConstraint\";\n  columns;\n  name;\n  getName() {\n    return this.name;\n  }\n}\nexport {\n  UniqueConstraint,\n  UniqueConstraintBuilder,\n  UniqueOnConstraintBuilder,\n  unique,\n  uniqueKeyName\n};\n//# sourceMappingURL=unique-constraint.js.map","import { ColumnBuilder } from \"../../column-builder.js\";\nimport { Column } from \"../../column.js\";\nimport { entityKind } from \"../../entity.js\";\nimport { ForeignKeyBuilder } from \"../foreign-keys.js\";\nimport { uniqueKeyName } from \"../unique-constraint.js\";\nclass SQLiteColumnBuilder extends ColumnBuilder {\n  static [entityKind] = \"SQLiteColumnBuilder\";\n  foreignKeyConfigs = [];\n  references(ref, actions = {}) {\n    this.foreignKeyConfigs.push({ ref, actions });\n    return this;\n  }\n  unique(name) {\n    this.config.isUnique = true;\n    this.config.uniqueName = name;\n    return this;\n  }\n  generatedAlwaysAs(as, config) {\n    this.config.generated = {\n      as,\n      type: \"always\",\n      mode: config?.mode ?? \"virtual\"\n    };\n    return this;\n  }\n  /** @internal */\n  buildForeignKeys(column, table) {\n    return this.foreignKeyConfigs.map(({ ref, actions }) => {\n      return ((ref2, actions2) => {\n        const builder = new ForeignKeyBuilder(() => {\n          const foreignColumn = ref2();\n          return { columns: [column], foreignColumns: [foreignColumn] };\n        });\n        if (actions2.onUpdate) {\n          builder.onUpdate(actions2.onUpdate);\n        }\n        if (actions2.onDelete) {\n          builder.onDelete(actions2.onDelete);\n        }\n        return builder.build(table);\n      })(ref, actions);\n    });\n  }\n}\nclass SQLiteColumn extends Column {\n  constructor(table, config) {\n    if (!config.uniqueName) {\n      config.uniqueName = uniqueKeyName(table, [config.name]);\n    }\n    super(table, config);\n    this.table = table;\n  }\n  static [entityKind] = \"SQLiteColumn\";\n}\nexport {\n  SQLiteColumn,\n  SQLiteColumnBuilder\n};\n//# sourceMappingURL=common.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig, textDecoder } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteBigIntBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBigIntBuilder\";\n  constructor(name) {\n    super(name, \"bigint\", \"SQLiteBigInt\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteBigInt(table, this.config);\n  }\n}\nclass SQLiteBigInt extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBigInt\";\n  getSQLType() {\n    return \"blob\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof Buffer !== \"undefined\" && Buffer.from) {\n      const buf = Buffer.isBuffer(value) ? value : value instanceof ArrayBuffer ? Buffer.from(value) : value.buffer ? Buffer.from(value.buffer, value.byteOffset, value.byteLength) : Buffer.from(value);\n      return BigInt(buf.toString(\"utf8\"));\n    }\n    return BigInt(textDecoder.decode(value));\n  }\n  mapToDriverValue(value) {\n    return Buffer.from(value.toString());\n  }\n}\nclass SQLiteBlobJsonBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBlobJsonBuilder\";\n  constructor(name) {\n    super(name, \"json\", \"SQLiteBlobJson\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteBlobJson(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteBlobJson extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBlobJson\";\n  getSQLType() {\n    return \"blob\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof Buffer !== \"undefined\" && Buffer.from) {\n      const buf = Buffer.isBuffer(value) ? value : value instanceof ArrayBuffer ? Buffer.from(value) : value.buffer ? Buffer.from(value.buffer, value.byteOffset, value.byteLength) : Buffer.from(value);\n      return JSON.parse(buf.toString(\"utf8\"));\n    }\n    return JSON.parse(textDecoder.decode(value));\n  }\n  mapToDriverValue(value) {\n    return Buffer.from(JSON.stringify(value));\n  }\n}\nclass SQLiteBlobBufferBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBlobBufferBuilder\";\n  constructor(name) {\n    super(name, \"buffer\", \"SQLiteBlobBuffer\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteBlobBuffer(table, this.config);\n  }\n}\nclass SQLiteBlobBuffer extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBlobBuffer\";\n  mapFromDriverValue(value) {\n    if (Buffer.isBuffer(value)) {\n      return value;\n    }\n    return Buffer.from(value);\n  }\n  getSQLType() {\n    return \"blob\";\n  }\n}\nfunction blob(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config?.mode === \"json\") {\n    return new SQLiteBlobJsonBuilder(name);\n  }\n  if (config?.mode === \"bigint\") {\n    return new SQLiteBigIntBuilder(name);\n  }\n  return new SQLiteBlobBufferBuilder(name);\n}\nexport {\n  SQLiteBigInt,\n  SQLiteBigIntBuilder,\n  SQLiteBlobBuffer,\n  SQLiteBlobBufferBuilder,\n  SQLiteBlobJson,\n  SQLiteBlobJsonBuilder,\n  blob\n};\n//# sourceMappingURL=blob.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteCustomColumnBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteCustomColumnBuilder\";\n  constructor(name, fieldConfig, customTypeParams) {\n    super(name, \"custom\", \"SQLiteCustomColumn\");\n    this.config.fieldConfig = fieldConfig;\n    this.config.customTypeParams = customTypeParams;\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteCustomColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteCustomColumn extends SQLiteColumn {\n  static [entityKind] = \"SQLiteCustomColumn\";\n  sqlName;\n  mapTo;\n  mapFrom;\n  constructor(table, config) {\n    super(table, config);\n    this.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n    this.mapTo = config.customTypeParams.toDriver;\n    this.mapFrom = config.customTypeParams.fromDriver;\n  }\n  getSQLType() {\n    return this.sqlName;\n  }\n  mapFromDriverValue(value) {\n    return typeof this.mapFrom === \"function\" ? this.mapFrom(value) : value;\n  }\n  mapToDriverValue(value) {\n    return typeof this.mapTo === \"function\" ? this.mapTo(value) : value;\n  }\n}\nfunction customType(customTypeParams) {\n  return (a, b) => {\n    const { name, config } = getColumnNameAndConfig(a, b);\n    return new SQLiteCustomColumnBuilder(\n      name,\n      config,\n      customTypeParams\n    );\n  };\n}\nexport {\n  SQLiteCustomColumn,\n  SQLiteCustomColumnBuilder,\n  customType\n};\n//# sourceMappingURL=custom.js.map","import { entityKind } from \"../../entity.js\";\nimport { sql } from \"../../sql/sql.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteBaseIntegerBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBaseIntegerBuilder\";\n  constructor(name, dataType, columnType) {\n    super(name, dataType, columnType);\n    this.config.autoIncrement = false;\n  }\n  primaryKey(config) {\n    if (config?.autoIncrement) {\n      this.config.autoIncrement = true;\n    }\n    this.config.hasDefault = true;\n    return super.primaryKey();\n  }\n}\nclass SQLiteBaseInteger extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBaseInteger\";\n  autoIncrement = this.config.autoIncrement;\n  getSQLType() {\n    return \"integer\";\n  }\n}\nclass SQLiteIntegerBuilder extends SQLiteBaseIntegerBuilder {\n  static [entityKind] = \"SQLiteIntegerBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"SQLiteInteger\");\n  }\n  build(table) {\n    return new SQLiteInteger(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteInteger extends SQLiteBaseInteger {\n  static [entityKind] = \"SQLiteInteger\";\n}\nclass SQLiteTimestampBuilder extends SQLiteBaseIntegerBuilder {\n  static [entityKind] = \"SQLiteTimestampBuilder\";\n  constructor(name, mode) {\n    super(name, \"date\", \"SQLiteTimestamp\");\n    this.config.mode = mode;\n  }\n  /**\n   * @deprecated Use `default()` with your own expression instead.\n   *\n   * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.\n   */\n  defaultNow() {\n    return this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`);\n  }\n  build(table) {\n    return new SQLiteTimestamp(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteTimestamp extends SQLiteBaseInteger {\n  static [entityKind] = \"SQLiteTimestamp\";\n  mode = this.config.mode;\n  mapFromDriverValue(value) {\n    if (this.config.mode === \"timestamp\") {\n      return new Date(value * 1e3);\n    }\n    return new Date(value);\n  }\n  mapToDriverValue(value) {\n    const unix = value.getTime();\n    if (this.config.mode === \"timestamp\") {\n      return Math.floor(unix / 1e3);\n    }\n    return unix;\n  }\n}\nclass SQLiteBooleanBuilder extends SQLiteBaseIntegerBuilder {\n  static [entityKind] = \"SQLiteBooleanBuilder\";\n  constructor(name, mode) {\n    super(name, \"boolean\", \"SQLiteBoolean\");\n    this.config.mode = mode;\n  }\n  build(table) {\n    return new SQLiteBoolean(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteBoolean extends SQLiteBaseInteger {\n  static [entityKind] = \"SQLiteBoolean\";\n  mode = this.config.mode;\n  mapFromDriverValue(value) {\n    return Number(value) === 1;\n  }\n  mapToDriverValue(value) {\n    return value ? 1 : 0;\n  }\n}\nfunction integer(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config?.mode === \"timestamp\" || config?.mode === \"timestamp_ms\") {\n    return new SQLiteTimestampBuilder(name, config.mode);\n  }\n  if (config?.mode === \"boolean\") {\n    return new SQLiteBooleanBuilder(name, config.mode);\n  }\n  return new SQLiteIntegerBuilder(name);\n}\nconst int = integer;\nexport {\n  SQLiteBaseInteger,\n  SQLiteBaseIntegerBuilder,\n  SQLiteBoolean,\n  SQLiteBooleanBuilder,\n  SQLiteInteger,\n  SQLiteIntegerBuilder,\n  SQLiteTimestamp,\n  SQLiteTimestampBuilder,\n  int,\n  integer\n};\n//# sourceMappingURL=integer.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteNumericBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteNumericBuilder\";\n  constructor(name) {\n    super(name, \"string\", \"SQLiteNumeric\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteNumeric(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteNumeric extends SQLiteColumn {\n  static [entityKind] = \"SQLiteNumeric\";\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\") return value;\n    return String(value);\n  }\n  getSQLType() {\n    return \"numeric\";\n  }\n}\nclass SQLiteNumericNumberBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteNumericNumberBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"SQLiteNumericNumber\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteNumericNumber(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteNumericNumber extends SQLiteColumn {\n  static [entityKind] = \"SQLiteNumericNumber\";\n  mapFromDriverValue(value) {\n    if (typeof value === \"number\") return value;\n    return Number(value);\n  }\n  mapToDriverValue = String;\n  getSQLType() {\n    return \"numeric\";\n  }\n}\nclass SQLiteNumericBigIntBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteNumericBigIntBuilder\";\n  constructor(name) {\n    super(name, \"bigint\", \"SQLiteNumericBigInt\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteNumericBigInt(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteNumericBigInt extends SQLiteColumn {\n  static [entityKind] = \"SQLiteNumericBigInt\";\n  mapFromDriverValue = BigInt;\n  mapToDriverValue = String;\n  getSQLType() {\n    return \"numeric\";\n  }\n}\nfunction numeric(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  const mode = config?.mode;\n  return mode === \"number\" ? new SQLiteNumericNumberBuilder(name) : mode === \"bigint\" ? new SQLiteNumericBigIntBuilder(name) : new SQLiteNumericBuilder(name);\n}\nexport {\n  SQLiteNumeric,\n  SQLiteNumericBigInt,\n  SQLiteNumericBigIntBuilder,\n  SQLiteNumericBuilder,\n  SQLiteNumericNumber,\n  SQLiteNumericNumberBuilder,\n  numeric\n};\n//# sourceMappingURL=numeric.js.map","import { entityKind } from \"../../entity.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteRealBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteRealBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"SQLiteReal\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteReal(table, this.config);\n  }\n}\nclass SQLiteReal extends SQLiteColumn {\n  static [entityKind] = \"SQLiteReal\";\n  getSQLType() {\n    return \"real\";\n  }\n}\nfunction real(name) {\n  return new SQLiteRealBuilder(name ?? \"\");\n}\nexport {\n  SQLiteReal,\n  SQLiteRealBuilder,\n  real\n};\n//# sourceMappingURL=real.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteTextBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteTextBuilder\";\n  constructor(name, config) {\n    super(name, \"string\", \"SQLiteText\");\n    this.config.enumValues = config.enum;\n    this.config.length = config.length;\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteText(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteText extends SQLiteColumn {\n  static [entityKind] = \"SQLiteText\";\n  enumValues = this.config.enumValues;\n  length = this.config.length;\n  constructor(table, config) {\n    super(table, config);\n  }\n  getSQLType() {\n    return `text${this.config.length ? `(${this.config.length})` : \"\"}`;\n  }\n}\nclass SQLiteTextJsonBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteTextJsonBuilder\";\n  constructor(name) {\n    super(name, \"json\", \"SQLiteTextJson\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteTextJson(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteTextJson extends SQLiteColumn {\n  static [entityKind] = \"SQLiteTextJson\";\n  getSQLType() {\n    return \"text\";\n  }\n  mapFromDriverValue(value) {\n    return JSON.parse(value);\n  }\n  mapToDriverValue(value) {\n    return JSON.stringify(value);\n  }\n}\nfunction text(a, b = {}) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config.mode === \"json\") {\n    return new SQLiteTextJsonBuilder(name);\n  }\n  return new SQLiteTextBuilder(name, config);\n}\nexport {\n  SQLiteText,\n  SQLiteTextBuilder,\n  SQLiteTextJson,\n  SQLiteTextJsonBuilder,\n  text\n};\n//# sourceMappingURL=text.js.map","import { blob } from \"./blob.js\";\nimport { customType } from \"./custom.js\";\nimport { integer } from \"./integer.js\";\nimport { numeric } from \"./numeric.js\";\nimport { real } from \"./real.js\";\nimport { text } from \"./text.js\";\nfunction getSQLiteColumnBuilders() {\n  return {\n    blob,\n    customType,\n    integer,\n    numeric,\n    real,\n    text\n  };\n}\nexport {\n  getSQLiteColumnBuilders\n};\n//# sourceMappingURL=all.js.map","import { entityKind } from \"../entity.js\";\nimport { Table } from \"../table.js\";\nimport { getSQLiteColumnBuilders } from \"./columns/all.js\";\nconst InlineForeignKeys = Symbol.for(\"drizzle:SQLiteInlineForeignKeys\");\nclass SQLiteTable extends Table {\n  static [entityKind] = \"SQLiteTable\";\n  /** @internal */\n  static Symbol = Object.assign({}, Table.Symbol, {\n    InlineForeignKeys\n  });\n  /** @internal */\n  [Table.Symbol.Columns];\n  /** @internal */\n  [InlineForeignKeys] = [];\n  /** @internal */\n  [Table.Symbol.ExtraConfigBuilder] = void 0;\n}\nfunction sqliteTableBase(name, columns, extraConfig, schema, baseName = name) {\n  const rawTable = new SQLiteTable(name, schema, baseName);\n  const parsedColumns = typeof columns === \"function\" ? columns(getSQLiteColumnBuilders()) : columns;\n  const builtColumns = Object.fromEntries(\n    Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {\n      const colBuilder = colBuilderBase;\n      colBuilder.setName(name2);\n      const column = colBuilder.build(rawTable);\n      rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n      return [name2, column];\n    })\n  );\n  const table = Object.assign(rawTable, builtColumns);\n  table[Table.Symbol.Columns] = builtColumns;\n  table[Table.Symbol.ExtraConfigColumns] = builtColumns;\n  if (extraConfig) {\n    table[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig;\n  }\n  return table;\n}\nconst sqliteTable = (name, columns, extraConfig) => {\n  return sqliteTableBase(name, columns, extraConfig);\n};\nfunction sqliteTableCreator(customizeTableName) {\n  return (name, columns, extraConfig) => {\n    return sqliteTableBase(customizeTableName(name), columns, extraConfig, void 0, name);\n  };\n}\nexport {\n  InlineForeignKeys,\n  SQLiteTable,\n  sqliteTable,\n  sqliteTableCreator\n};\n//# sourceMappingURL=table.js.map","import { is } from \"../entity.js\";\nimport { SQL } from \"../sql/sql.js\";\nimport { Subquery } from \"../subquery.js\";\nimport { Table } from \"../table.js\";\nimport { ViewBaseConfig } from \"../view-common.js\";\nimport { CheckBuilder } from \"./checks.js\";\nimport { ForeignKeyBuilder } from \"./foreign-keys.js\";\nimport { IndexBuilder } from \"./indexes.js\";\nimport { PrimaryKeyBuilder } from \"./primary-keys.js\";\nimport { SQLiteTable } from \"./table.js\";\nimport { UniqueConstraintBuilder } from \"./unique-constraint.js\";\nfunction getTableConfig(table) {\n  const columns = Object.values(table[SQLiteTable.Symbol.Columns]);\n  const indexes = [];\n  const checks = [];\n  const primaryKeys = [];\n  const uniqueConstraints = [];\n  const foreignKeys = Object.values(table[SQLiteTable.Symbol.InlineForeignKeys]);\n  const name = table[Table.Symbol.Name];\n  const extraConfigBuilder = table[SQLiteTable.Symbol.ExtraConfigBuilder];\n  if (extraConfigBuilder !== void 0) {\n    const extraConfig = extraConfigBuilder(table[SQLiteTable.Symbol.Columns]);\n    const extraValues = Array.isArray(extraConfig) ? extraConfig.flat(1) : Object.values(extraConfig);\n    for (const builder of Object.values(extraValues)) {\n      if (is(builder, IndexBuilder)) {\n        indexes.push(builder.build(table));\n      } else if (is(builder, CheckBuilder)) {\n        checks.push(builder.build(table));\n      } else if (is(builder, UniqueConstraintBuilder)) {\n        uniqueConstraints.push(builder.build(table));\n      } else if (is(builder, PrimaryKeyBuilder)) {\n        primaryKeys.push(builder.build(table));\n      } else if (is(builder, ForeignKeyBuilder)) {\n        foreignKeys.push(builder.build(table));\n      }\n    }\n  }\n  return {\n    columns,\n    indexes,\n    foreignKeys,\n    checks,\n    primaryKeys,\n    uniqueConstraints,\n    name\n  };\n}\nfunction extractUsedTable(table) {\n  if (is(table, SQLiteTable)) {\n    return [`${table[Table.Symbol.BaseName]}`];\n  }\n  if (is(table, Subquery)) {\n    return table._.usedTables ?? [];\n  }\n  if (is(table, SQL)) {\n    return table.usedTables ?? [];\n  }\n  return [];\n}\nfunction getViewConfig(view) {\n  return {\n    ...view[ViewBaseConfig]\n    // ...view[SQLiteViewConfig],\n  };\n}\nexport {\n  extractUsedTable,\n  getTableConfig,\n  getViewConfig\n};\n//# sourceMappingURL=utils.js.map","import { entityKind } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { SQLiteTable } from \"../table.js\";\nimport { Table } from \"../../table.js\";\nimport { orderSelectedFields } from \"../../utils.js\";\nimport { extractUsedTable } from \"../utils.js\";\nclass SQLiteDeleteBase extends QueryPromise {\n  constructor(table, session, dialect, withList) {\n    super();\n    this.table = table;\n    this.session = session;\n    this.dialect = dialect;\n    this.config = { table, withList };\n  }\n  static [entityKind] = \"SQLiteDelete\";\n  /** @internal */\n  config;\n  /**\n   * Adds a `where` clause to the query.\n   *\n   * Calling this method will delete only those rows that fulfill a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/delete}\n   *\n   * @param where the `where` clause.\n   *\n   * @example\n   * You can use conditional operators and `sql function` to filter the rows to be deleted.\n   *\n   * ```ts\n   * // Delete all cars with green color\n   * db.delete(cars).where(eq(cars.color, 'green'));\n   * // or\n   * db.delete(cars).where(sql`${cars.color} = 'green'`)\n   * ```\n   *\n   * You can logically combine conditional operators with `and()` and `or()` operators:\n   *\n   * ```ts\n   * // Delete all BMW cars with a green color\n   * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n   *\n   * // Delete all cars with the green or blue color\n   * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n   * ```\n   */\n  where(where) {\n    this.config.where = where;\n    return this;\n  }\n  orderBy(...columns) {\n    if (typeof columns[0] === \"function\") {\n      const orderBy = columns[0](\n        new Proxy(\n          this.config.table[Table.Symbol.Columns],\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"alias\", sqlBehavior: \"sql\" })\n        )\n      );\n      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n      this.config.orderBy = orderByArray;\n    } else {\n      const orderByArray = columns;\n      this.config.orderBy = orderByArray;\n    }\n    return this;\n  }\n  limit(limit) {\n    this.config.limit = limit;\n    return this;\n  }\n  returning(fields = this.table[SQLiteTable.Symbol.Columns]) {\n    this.config.returning = orderSelectedFields(fields);\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildDeleteQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  /** @internal */\n  _prepare(isOneTimeQuery = true) {\n    return this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](\n      this.dialect.sqlToQuery(this.getSQL()),\n      this.config.returning,\n      this.config.returning ? \"all\" : \"run\",\n      true,\n      void 0,\n      {\n        type: \"delete\",\n        tables: extractUsedTable(this.config.table)\n      }\n    );\n  }\n  prepare() {\n    return this._prepare(false);\n  }\n  run = (placeholderValues) => {\n    return this._prepare().run(placeholderValues);\n  };\n  all = (placeholderValues) => {\n    return this._prepare().all(placeholderValues);\n  };\n  get = (placeholderValues) => {\n    return this._prepare().get(placeholderValues);\n  };\n  values = (placeholderValues) => {\n    return this._prepare().values(placeholderValues);\n  };\n  async execute(placeholderValues) {\n    return this._prepare().execute(placeholderValues);\n  }\n  $dynamic() {\n    return this;\n  }\n}\nexport {\n  SQLiteDeleteBase\n};\n//# sourceMappingURL=delete.js.map","import { entityKind } from \"./entity.js\";\nimport { Table } from \"./table.js\";\nfunction toSnakeCase(input) {\n  const words = input.replace(/['\\u2019]/g, \"\").match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n  return words.map((word) => word.toLowerCase()).join(\"_\");\n}\nfunction toCamelCase(input) {\n  const words = input.replace(/['\\u2019]/g, \"\").match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n  return words.reduce((acc, word, i) => {\n    const formattedWord = i === 0 ? word.toLowerCase() : `${word[0].toUpperCase()}${word.slice(1)}`;\n    return acc + formattedWord;\n  }, \"\");\n}\nfunction noopCase(input) {\n  return input;\n}\nclass CasingCache {\n  static [entityKind] = \"CasingCache\";\n  /** @internal */\n  cache = {};\n  cachedTables = {};\n  convert;\n  constructor(casing) {\n    this.convert = casing === \"snake_case\" ? toSnakeCase : casing === \"camelCase\" ? toCamelCase : noopCase;\n  }\n  getColumnCasing(column) {\n    if (!column.keyAsName) return column.name;\n    const schema = column.table[Table.Symbol.Schema] ?? \"public\";\n    const tableName = column.table[Table.Symbol.OriginalName];\n    const key = `${schema}.${tableName}.${column.name}`;\n    if (!this.cache[key]) {\n      this.cacheTable(column.table);\n    }\n    return this.cache[key];\n  }\n  cacheTable(table) {\n    const schema = table[Table.Symbol.Schema] ?? \"public\";\n    const tableName = table[Table.Symbol.OriginalName];\n    const tableKey = `${schema}.${tableName}`;\n    if (!this.cachedTables[tableKey]) {\n      for (const column of Object.values(table[Table.Symbol.Columns])) {\n        const columnKey = `${tableKey}.${column.name}`;\n        this.cache[columnKey] = this.convert(column.name);\n      }\n      this.cachedTables[tableKey] = true;\n    }\n  }\n  clearCache() {\n    this.cache = {};\n    this.cachedTables = {};\n  }\n}\nexport {\n  CasingCache,\n  toCamelCase,\n  toSnakeCase\n};\n//# sourceMappingURL=casing.js.map","import { entityKind } from \"../entity.js\";\nimport { View } from \"../sql/sql.js\";\nclass SQLiteViewBase extends View {\n  static [entityKind] = \"SQLiteViewBase\";\n}\nexport {\n  SQLiteViewBase\n};\n//# sourceMappingURL=view-base.js.map","import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from \"../alias.js\";\nimport { CasingCache } from \"../casing.js\";\nimport { Column } from \"../column.js\";\nimport { entityKind, is } from \"../entity.js\";\nimport { DrizzleError } from \"../errors.js\";\nimport {\n  getOperators,\n  getOrderByOperators,\n  Many,\n  normalizeRelation,\n  One\n} from \"../relations.js\";\nimport { and, eq } from \"../sql/index.js\";\nimport { Param, SQL, sql } from \"../sql/sql.js\";\nimport { SQLiteColumn } from \"./columns/index.js\";\nimport { SQLiteTable } from \"./table.js\";\nimport { Subquery } from \"../subquery.js\";\nimport { getTableName, getTableUniqueName, Table } from \"../table.js\";\nimport { orderSelectedFields } from \"../utils.js\";\nimport { ViewBaseConfig } from \"../view-common.js\";\nimport { SQLiteViewBase } from \"./view-base.js\";\nclass SQLiteDialect {\n  static [entityKind] = \"SQLiteDialect\";\n  /** @internal */\n  casing;\n  constructor(config) {\n    this.casing = new CasingCache(config?.casing);\n  }\n  escapeName(name) {\n    return `\"${name}\"`;\n  }\n  escapeParam(_num) {\n    return \"?\";\n  }\n  escapeString(str) {\n    return `'${str.replace(/'/g, \"''\")}'`;\n  }\n  buildWithCTE(queries) {\n    if (!queries?.length) return void 0;\n    const withSqlChunks = [sql`with `];\n    for (const [i, w] of queries.entries()) {\n      withSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n      if (i < queries.length - 1) {\n        withSqlChunks.push(sql`, `);\n      }\n    }\n    withSqlChunks.push(sql` `);\n    return sql.join(withSqlChunks);\n  }\n  buildDeleteQuery({ table, where, returning, withList, limit, orderBy }) {\n    const withSql = this.buildWithCTE(withList);\n    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;\n    const whereSql = where ? sql` where ${where}` : void 0;\n    const orderBySql = this.buildOrderBy(orderBy);\n    const limitSql = this.buildLimit(limit);\n    return sql`${withSql}delete from ${table}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n  }\n  buildUpdateSet(table, set) {\n    const tableColumns = table[Table.Symbol.Columns];\n    const columnNames = Object.keys(tableColumns).filter(\n      (colName) => set[colName] !== void 0 || tableColumns[colName]?.onUpdateFn !== void 0\n    );\n    const setSize = columnNames.length;\n    return sql.join(columnNames.flatMap((colName, i) => {\n      const col = tableColumns[colName];\n      const value = set[colName] ?? sql.param(col.onUpdateFn(), col);\n      const res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;\n      if (i < setSize - 1) {\n        return [res, sql.raw(\", \")];\n      }\n      return [res];\n    }));\n  }\n  buildUpdateQuery({ table, set, where, returning, withList, joins, from, limit, orderBy }) {\n    const withSql = this.buildWithCTE(withList);\n    const setSql = this.buildUpdateSet(table, set);\n    const fromSql = from && sql.join([sql.raw(\" from \"), this.buildFromTable(from)]);\n    const joinsSql = this.buildJoins(joins);\n    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;\n    const whereSql = where ? sql` where ${where}` : void 0;\n    const orderBySql = this.buildOrderBy(orderBy);\n    const limitSql = this.buildLimit(limit);\n    return sql`${withSql}update ${table} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n  }\n  /**\n   * Builds selection SQL with provided fields/expressions\n   *\n   * Examples:\n   *\n   * `select <selection> from`\n   *\n   * `insert ... returning <selection>`\n   *\n   * If `isSingleTable` is true, then columns won't be prefixed with table name\n   */\n  buildSelection(fields, { isSingleTable = false } = {}) {\n    const columnsLen = fields.length;\n    const chunks = fields.flatMap(({ field }, i) => {\n      const chunk = [];\n      if (is(field, SQL.Aliased) && field.isSelectionField) {\n        chunk.push(sql.identifier(field.fieldAlias));\n      } else if (is(field, SQL.Aliased) || is(field, SQL)) {\n        const query = is(field, SQL.Aliased) ? field.sql : field;\n        if (isSingleTable) {\n          chunk.push(\n            new SQL(\n              query.queryChunks.map((c) => {\n                if (is(c, Column)) {\n                  return sql.identifier(this.casing.getColumnCasing(c));\n                }\n                return c;\n              })\n            )\n          );\n        } else {\n          chunk.push(query);\n        }\n        if (is(field, SQL.Aliased)) {\n          chunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n        }\n      } else if (is(field, Column)) {\n        const tableName = field.table[Table.Symbol.Name];\n        if (field.columnType === \"SQLiteNumericBigInt\") {\n          if (isSingleTable) {\n            chunk.push(sql`cast(${sql.identifier(this.casing.getColumnCasing(field))} as text)`);\n          } else {\n            chunk.push(\n              sql`cast(${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))} as text)`\n            );\n          }\n        } else {\n          if (isSingleTable) {\n            chunk.push(sql.identifier(this.casing.getColumnCasing(field)));\n          } else {\n            chunk.push(sql`${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))}`);\n          }\n        }\n      }\n      if (i < columnsLen - 1) {\n        chunk.push(sql`, `);\n      }\n      return chunk;\n    });\n    return sql.join(chunks);\n  }\n  buildJoins(joins) {\n    if (!joins || joins.length === 0) {\n      return void 0;\n    }\n    const joinsArray = [];\n    if (joins) {\n      for (const [index, joinMeta] of joins.entries()) {\n        if (index === 0) {\n          joinsArray.push(sql` `);\n        }\n        const table = joinMeta.table;\n        const onSql = joinMeta.on ? sql` on ${joinMeta.on}` : void 0;\n        if (is(table, SQLiteTable)) {\n          const tableName = table[SQLiteTable.Symbol.Name];\n          const tableSchema = table[SQLiteTable.Symbol.Schema];\n          const origTableName = table[SQLiteTable.Symbol.OriginalName];\n          const alias = tableName === origTableName ? void 0 : joinMeta.alias;\n          joinsArray.push(\n            sql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : void 0}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`}${onSql}`\n          );\n        } else {\n          joinsArray.push(\n            sql`${sql.raw(joinMeta.joinType)} join ${table}${onSql}`\n          );\n        }\n        if (index < joins.length - 1) {\n          joinsArray.push(sql` `);\n        }\n      }\n    }\n    return sql.join(joinsArray);\n  }\n  buildLimit(limit) {\n    return typeof limit === \"object\" || typeof limit === \"number\" && limit >= 0 ? sql` limit ${limit}` : void 0;\n  }\n  buildOrderBy(orderBy) {\n    const orderByList = [];\n    if (orderBy) {\n      for (const [index, orderByValue] of orderBy.entries()) {\n        orderByList.push(orderByValue);\n        if (index < orderBy.length - 1) {\n          orderByList.push(sql`, `);\n        }\n      }\n    }\n    return orderByList.length > 0 ? sql` order by ${sql.join(orderByList)}` : void 0;\n  }\n  buildFromTable(table) {\n    if (is(table, Table) && table[Table.Symbol.IsAlias]) {\n      return sql`${sql`${sql.identifier(table[Table.Symbol.Schema] ?? \"\")}.`.if(table[Table.Symbol.Schema])}${sql.identifier(table[Table.Symbol.OriginalName])} ${sql.identifier(table[Table.Symbol.Name])}`;\n    }\n    return table;\n  }\n  buildSelectQuery({\n    withList,\n    fields,\n    fieldsFlat,\n    where,\n    having,\n    table,\n    joins,\n    orderBy,\n    groupBy,\n    limit,\n    offset,\n    distinct,\n    setOperators\n  }) {\n    const fieldsList = fieldsFlat ?? orderSelectedFields(fields);\n    for (const f of fieldsList) {\n      if (is(f.field, Column) && getTableName(f.field.table) !== (is(table, Subquery) ? table._.alias : is(table, SQLiteViewBase) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : getTableName(table)) && !((table2) => joins?.some(\n        ({ alias }) => alias === (table2[Table.Symbol.IsAlias] ? getTableName(table2) : table2[Table.Symbol.BaseName])\n      ))(f.field.table)) {\n        const tableName = getTableName(f.field.table);\n        throw new Error(\n          `Your \"${f.path.join(\"->\")}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`\n        );\n      }\n    }\n    const isSingleTable = !joins || joins.length === 0;\n    const withSql = this.buildWithCTE(withList);\n    const distinctSql = distinct ? sql` distinct` : void 0;\n    const selection = this.buildSelection(fieldsList, { isSingleTable });\n    const tableSql = this.buildFromTable(table);\n    const joinsSql = this.buildJoins(joins);\n    const whereSql = where ? sql` where ${where}` : void 0;\n    const havingSql = having ? sql` having ${having}` : void 0;\n    const groupByList = [];\n    if (groupBy) {\n      for (const [index, groupByValue] of groupBy.entries()) {\n        groupByList.push(groupByValue);\n        if (index < groupBy.length - 1) {\n          groupByList.push(sql`, `);\n        }\n      }\n    }\n    const groupBySql = groupByList.length > 0 ? sql` group by ${sql.join(groupByList)}` : void 0;\n    const orderBySql = this.buildOrderBy(orderBy);\n    const limitSql = this.buildLimit(limit);\n    const offsetSql = offset ? sql` offset ${offset}` : void 0;\n    const finalQuery = sql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;\n    if (setOperators.length > 0) {\n      return this.buildSetOperations(finalQuery, setOperators);\n    }\n    return finalQuery;\n  }\n  buildSetOperations(leftSelect, setOperators) {\n    const [setOperator, ...rest] = setOperators;\n    if (!setOperator) {\n      throw new Error(\"Cannot pass undefined values to any set operator\");\n    }\n    if (rest.length === 0) {\n      return this.buildSetOperationQuery({ leftSelect, setOperator });\n    }\n    return this.buildSetOperations(\n      this.buildSetOperationQuery({ leftSelect, setOperator }),\n      rest\n    );\n  }\n  buildSetOperationQuery({\n    leftSelect,\n    setOperator: { type, isAll, rightSelect, limit, orderBy, offset }\n  }) {\n    const leftChunk = sql`${leftSelect.getSQL()} `;\n    const rightChunk = sql`${rightSelect.getSQL()}`;\n    let orderBySql;\n    if (orderBy && orderBy.length > 0) {\n      const orderByValues = [];\n      for (const singleOrderBy of orderBy) {\n        if (is(singleOrderBy, SQLiteColumn)) {\n          orderByValues.push(sql.identifier(singleOrderBy.name));\n        } else if (is(singleOrderBy, SQL)) {\n          for (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n            const chunk = singleOrderBy.queryChunks[i];\n            if (is(chunk, SQLiteColumn)) {\n              singleOrderBy.queryChunks[i] = sql.identifier(this.casing.getColumnCasing(chunk));\n            }\n          }\n          orderByValues.push(sql`${singleOrderBy}`);\n        } else {\n          orderByValues.push(sql`${singleOrderBy}`);\n        }\n      }\n      orderBySql = sql` order by ${sql.join(orderByValues, sql`, `)}`;\n    }\n    const limitSql = typeof limit === \"object\" || typeof limit === \"number\" && limit >= 0 ? sql` limit ${limit}` : void 0;\n    const operatorChunk = sql.raw(`${type} ${isAll ? \"all \" : \"\"}`);\n    const offsetSql = offset ? sql` offset ${offset}` : void 0;\n    return sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n  }\n  buildInsertQuery({ table, values: valuesOrSelect, onConflict, returning, withList, select }) {\n    const valuesSqlList = [];\n    const columns = table[Table.Symbol.Columns];\n    const colEntries = Object.entries(columns).filter(\n      ([_, col]) => !col.shouldDisableInsert()\n    );\n    const insertOrder = colEntries.map(([, column]) => sql.identifier(this.casing.getColumnCasing(column)));\n    if (select) {\n      const select2 = valuesOrSelect;\n      if (is(select2, SQL)) {\n        valuesSqlList.push(select2);\n      } else {\n        valuesSqlList.push(select2.getSQL());\n      }\n    } else {\n      const values = valuesOrSelect;\n      valuesSqlList.push(sql.raw(\"values \"));\n      for (const [valueIndex, value] of values.entries()) {\n        const valueList = [];\n        for (const [fieldName, col] of colEntries) {\n          const colValue = value[fieldName];\n          if (colValue === void 0 || is(colValue, Param) && colValue.value === void 0) {\n            let defaultValue;\n            if (col.default !== null && col.default !== void 0) {\n              defaultValue = is(col.default, SQL) ? col.default : sql.param(col.default, col);\n            } else if (col.defaultFn !== void 0) {\n              const defaultFnResult = col.defaultFn();\n              defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n            } else if (!col.default && col.onUpdateFn !== void 0) {\n              const onUpdateFnResult = col.onUpdateFn();\n              defaultValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n            } else {\n              defaultValue = sql`null`;\n            }\n            valueList.push(defaultValue);\n          } else {\n            valueList.push(colValue);\n          }\n        }\n        valuesSqlList.push(valueList);\n        if (valueIndex < values.length - 1) {\n          valuesSqlList.push(sql`, `);\n        }\n      }\n    }\n    const withSql = this.buildWithCTE(withList);\n    const valuesSql = sql.join(valuesSqlList);\n    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;\n    const onConflictSql = onConflict?.length ? sql.join(onConflict) : void 0;\n    return sql`${withSql}insert into ${table} ${insertOrder} ${valuesSql}${onConflictSql}${returningSql}`;\n  }\n  sqlToQuery(sql2, invokeSource) {\n    return sql2.toQuery({\n      casing: this.casing,\n      escapeName: this.escapeName,\n      escapeParam: this.escapeParam,\n      escapeString: this.escapeString,\n      invokeSource\n    });\n  }\n  buildRelationalQuery({\n    fullSchema,\n    schema,\n    tableNamesMap,\n    table,\n    tableConfig,\n    queryConfig: config,\n    tableAlias,\n    nestedQueryRelation,\n    joinOn\n  }) {\n    let selection = [];\n    let limit, offset, orderBy = [], where;\n    const joins = [];\n    if (config === true) {\n      const selectionEntries = Object.entries(tableConfig.columns);\n      selection = selectionEntries.map(([key, value]) => ({\n        dbKey: value.name,\n        tsKey: key,\n        field: aliasedTableColumn(value, tableAlias),\n        relationTableTsKey: void 0,\n        isJson: false,\n        selection: []\n      }));\n    } else {\n      const aliasedColumns = Object.fromEntries(\n        Object.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)])\n      );\n      if (config.where) {\n        const whereSql = typeof config.where === \"function\" ? config.where(aliasedColumns, getOperators()) : config.where;\n        where = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n      }\n      const fieldsSelection = [];\n      let selectedColumns = [];\n      if (config.columns) {\n        let isIncludeMode = false;\n        for (const [field, value] of Object.entries(config.columns)) {\n          if (value === void 0) {\n            continue;\n          }\n          if (field in tableConfig.columns) {\n            if (!isIncludeMode && value === true) {\n              isIncludeMode = true;\n            }\n            selectedColumns.push(field);\n          }\n        }\n        if (selectedColumns.length > 0) {\n          selectedColumns = isIncludeMode ? selectedColumns.filter((c) => config.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n        }\n      } else {\n        selectedColumns = Object.keys(tableConfig.columns);\n      }\n      for (const field of selectedColumns) {\n        const column = tableConfig.columns[field];\n        fieldsSelection.push({ tsKey: field, value: column });\n      }\n      let selectedRelations = [];\n      if (config.with) {\n        selectedRelations = Object.entries(config.with).filter((entry) => !!entry[1]).map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey] }));\n      }\n      let extras;\n      if (config.extras) {\n        extras = typeof config.extras === \"function\" ? config.extras(aliasedColumns, { sql }) : config.extras;\n        for (const [tsKey, value] of Object.entries(extras)) {\n          fieldsSelection.push({\n            tsKey,\n            value: mapColumnsInAliasedSQLToAlias(value, tableAlias)\n          });\n        }\n      }\n      for (const { tsKey, value } of fieldsSelection) {\n        selection.push({\n          dbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,\n          tsKey,\n          field: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n          relationTableTsKey: void 0,\n          isJson: false,\n          selection: []\n        });\n      }\n      let orderByOrig = typeof config.orderBy === \"function\" ? config.orderBy(aliasedColumns, getOrderByOperators()) : config.orderBy ?? [];\n      if (!Array.isArray(orderByOrig)) {\n        orderByOrig = [orderByOrig];\n      }\n      orderBy = orderByOrig.map((orderByValue) => {\n        if (is(orderByValue, Column)) {\n          return aliasedTableColumn(orderByValue, tableAlias);\n        }\n        return mapColumnsInSQLToAlias(orderByValue, tableAlias);\n      });\n      limit = config.limit;\n      offset = config.offset;\n      for (const {\n        tsKey: selectedRelationTsKey,\n        queryConfig: selectedRelationConfigValue,\n        relation\n      } of selectedRelations) {\n        const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n        const relationTableName = getTableUniqueName(relation.referencedTable);\n        const relationTableTsName = tableNamesMap[relationTableName];\n        const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n        const joinOn2 = and(\n          ...normalizedRelation.fields.map(\n            (field2, i) => eq(\n              aliasedTableColumn(normalizedRelation.references[i], relationTableAlias),\n              aliasedTableColumn(field2, tableAlias)\n            )\n          )\n        );\n        const builtRelation = this.buildRelationalQuery({\n          fullSchema,\n          schema,\n          tableNamesMap,\n          table: fullSchema[relationTableTsName],\n          tableConfig: schema[relationTableTsName],\n          queryConfig: is(relation, One) ? selectedRelationConfigValue === true ? { limit: 1 } : { ...selectedRelationConfigValue, limit: 1 } : selectedRelationConfigValue,\n          tableAlias: relationTableAlias,\n          joinOn: joinOn2,\n          nestedQueryRelation: relation\n        });\n        const field = sql`(${builtRelation.sql})`.as(selectedRelationTsKey);\n        selection.push({\n          dbKey: selectedRelationTsKey,\n          tsKey: selectedRelationTsKey,\n          field,\n          relationTableTsKey: relationTableTsName,\n          isJson: true,\n          selection: builtRelation.selection\n        });\n      }\n    }\n    if (selection.length === 0) {\n      throw new DrizzleError({\n        message: `No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`\n      });\n    }\n    let result;\n    where = and(joinOn, where);\n    if (nestedQueryRelation) {\n      let field = sql`json_array(${sql.join(\n        selection.map(\n          ({ field: field2 }) => is(field2, SQLiteColumn) ? sql.identifier(this.casing.getColumnCasing(field2)) : is(field2, SQL.Aliased) ? field2.sql : field2\n        ),\n        sql`, `\n      )})`;\n      if (is(nestedQueryRelation, Many)) {\n        field = sql`coalesce(json_group_array(${field}), json_array())`;\n      }\n      const nestedSelection = [{\n        dbKey: \"data\",\n        tsKey: \"data\",\n        field: field.as(\"data\"),\n        isJson: true,\n        relationTableTsKey: tableConfig.tsName,\n        selection\n      }];\n      const needsSubquery = limit !== void 0 || offset !== void 0 || orderBy.length > 0;\n      if (needsSubquery) {\n        result = this.buildSelectQuery({\n          table: aliasedTable(table, tableAlias),\n          fields: {},\n          fieldsFlat: [\n            {\n              path: [],\n              field: sql.raw(\"*\")\n            }\n          ],\n          where,\n          limit,\n          offset,\n          orderBy,\n          setOperators: []\n        });\n        where = void 0;\n        limit = void 0;\n        offset = void 0;\n        orderBy = void 0;\n      } else {\n        result = aliasedTable(table, tableAlias);\n      }\n      result = this.buildSelectQuery({\n        table: is(result, SQLiteTable) ? result : new Subquery(result, {}, tableAlias),\n        fields: {},\n        fieldsFlat: nestedSelection.map(({ field: field2 }) => ({\n          path: [],\n          field: is(field2, Column) ? aliasedTableColumn(field2, tableAlias) : field2\n        })),\n        joins,\n        where,\n        limit,\n        offset,\n        orderBy,\n        setOperators: []\n      });\n    } else {\n      result = this.buildSelectQuery({\n        table: aliasedTable(table, tableAlias),\n        fields: {},\n        fieldsFlat: selection.map(({ field }) => ({\n          path: [],\n          field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field\n        })),\n        joins,\n        where,\n        limit,\n        offset,\n        orderBy,\n        setOperators: []\n      });\n    }\n    return {\n      tableTsKey: tableConfig.tsName,\n      sql: result,\n      selection\n    };\n  }\n}\nclass SQLiteSyncDialect extends SQLiteDialect {\n  static [entityKind] = \"SQLiteSyncDialect\";\n  migrate(migrations, session, config) {\n    const migrationsTable = config === void 0 ? \"__drizzle_migrations\" : typeof config === \"string\" ? \"__drizzle_migrations\" : config.migrationsTable ?? \"__drizzle_migrations\";\n    const migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n    session.run(migrationTableCreate);\n    const dbMigrations = session.values(\n      sql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`\n    );\n    const lastDbMigration = dbMigrations[0] ?? void 0;\n    session.run(sql`BEGIN`);\n    try {\n      for (const migration of migrations) {\n        if (!lastDbMigration || Number(lastDbMigration[2]) < migration.folderMillis) {\n          for (const stmt of migration.sql) {\n            session.run(sql.raw(stmt));\n          }\n          session.run(\n            sql`INSERT INTO ${sql.identifier(migrationsTable)} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`\n          );\n        }\n      }\n      session.run(sql`COMMIT`);\n    } catch (e) {\n      session.run(sql`ROLLBACK`);\n      throw e;\n    }\n  }\n}\nclass SQLiteAsyncDialect extends SQLiteDialect {\n  static [entityKind] = \"SQLiteAsyncDialect\";\n  async migrate(migrations, session, config) {\n    const migrationsTable = config === void 0 ? \"__drizzle_migrations\" : typeof config === \"string\" ? \"__drizzle_migrations\" : config.migrationsTable ?? \"__drizzle_migrations\";\n    const migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n    await session.run(migrationTableCreate);\n    const dbMigrations = await session.values(\n      sql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`\n    );\n    const lastDbMigration = dbMigrations[0] ?? void 0;\n    await session.transaction(async (tx) => {\n      for (const migration of migrations) {\n        if (!lastDbMigration || Number(lastDbMigration[2]) < migration.folderMillis) {\n          for (const stmt of migration.sql) {\n            await tx.run(sql.raw(stmt));\n          }\n          await tx.run(\n            sql`INSERT INTO ${sql.identifier(migrationsTable)} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`\n          );\n        }\n      }\n    });\n  }\n}\nexport {\n  SQLiteAsyncDialect,\n  SQLiteDialect,\n  SQLiteSyncDialect\n};\n//# sourceMappingURL=dialect.js.map","import { entityKind } from \"../entity.js\";\nclass TypedQueryBuilder {\n  static [entityKind] = \"TypedQueryBuilder\";\n  /** @internal */\n  getSelectedFields() {\n    return this._.selectedFields;\n  }\n}\nexport {\n  TypedQueryBuilder\n};\n//# sourceMappingURL=query-builder.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { TypedQueryBuilder } from \"../../query-builders/query-builder.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { SQL, View } from \"../../sql/sql.js\";\nimport { Subquery } from \"../../subquery.js\";\nimport { Table } from \"../../table.js\";\nimport {\n  applyMixins,\n  getTableColumns,\n  getTableLikeName,\n  haveSameKeys,\n  orderSelectedFields\n} from \"../../utils.js\";\nimport { ViewBaseConfig } from \"../../view-common.js\";\nimport { extractUsedTable } from \"../utils.js\";\nimport { SQLiteViewBase } from \"../view-base.js\";\nclass SQLiteSelectBuilder {\n  static [entityKind] = \"SQLiteSelectBuilder\";\n  fields;\n  session;\n  dialect;\n  withList;\n  distinct;\n  constructor(config) {\n    this.fields = config.fields;\n    this.session = config.session;\n    this.dialect = config.dialect;\n    this.withList = config.withList;\n    this.distinct = config.distinct;\n  }\n  from(source) {\n    const isPartialSelect = !!this.fields;\n    let fields;\n    if (this.fields) {\n      fields = this.fields;\n    } else if (is(source, Subquery)) {\n      fields = Object.fromEntries(\n        Object.keys(source._.selectedFields).map((key) => [key, source[key]])\n      );\n    } else if (is(source, SQLiteViewBase)) {\n      fields = source[ViewBaseConfig].selectedFields;\n    } else if (is(source, SQL)) {\n      fields = {};\n    } else {\n      fields = getTableColumns(source);\n    }\n    return new SQLiteSelectBase({\n      table: source,\n      fields,\n      isPartialSelect,\n      session: this.session,\n      dialect: this.dialect,\n      withList: this.withList,\n      distinct: this.distinct\n    });\n  }\n}\nclass SQLiteSelectQueryBuilderBase extends TypedQueryBuilder {\n  static [entityKind] = \"SQLiteSelectQueryBuilder\";\n  _;\n  /** @internal */\n  config;\n  joinsNotNullableMap;\n  tableName;\n  isPartialSelect;\n  session;\n  dialect;\n  cacheConfig = void 0;\n  usedTables = /* @__PURE__ */ new Set();\n  constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }) {\n    super();\n    this.config = {\n      withList,\n      table,\n      fields: { ...fields },\n      distinct,\n      setOperators: []\n    };\n    this.isPartialSelect = isPartialSelect;\n    this.session = session;\n    this.dialect = dialect;\n    this._ = {\n      selectedFields: fields,\n      config: this.config\n    };\n    this.tableName = getTableLikeName(table);\n    this.joinsNotNullableMap = typeof this.tableName === \"string\" ? { [this.tableName]: true } : {};\n    for (const item of extractUsedTable(table)) this.usedTables.add(item);\n  }\n  /** @internal */\n  getUsedTables() {\n    return [...this.usedTables];\n  }\n  createJoin(joinType) {\n    return (table, on) => {\n      const baseTableName = this.tableName;\n      const tableName = getTableLikeName(table);\n      for (const item of extractUsedTable(table)) this.usedTables.add(item);\n      if (typeof tableName === \"string\" && this.config.joins?.some((join) => join.alias === tableName)) {\n        throw new Error(`Alias \"${tableName}\" is already used in this query`);\n      }\n      if (!this.isPartialSelect) {\n        if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === \"string\") {\n          this.config.fields = {\n            [baseTableName]: this.config.fields\n          };\n        }\n        if (typeof tableName === \"string\" && !is(table, SQL)) {\n          const selection = is(table, Subquery) ? table._.selectedFields : is(table, View) ? table[ViewBaseConfig].selectedFields : table[Table.Symbol.Columns];\n          this.config.fields[tableName] = selection;\n        }\n      }\n      if (typeof on === \"function\") {\n        on = on(\n          new Proxy(\n            this.config.fields,\n            new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n          )\n        );\n      }\n      if (!this.config.joins) {\n        this.config.joins = [];\n      }\n      this.config.joins.push({ on, table, joinType, alias: tableName });\n      if (typeof tableName === \"string\") {\n        switch (joinType) {\n          case \"left\": {\n            this.joinsNotNullableMap[tableName] = false;\n            break;\n          }\n          case \"right\": {\n            this.joinsNotNullableMap = Object.fromEntries(\n              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])\n            );\n            this.joinsNotNullableMap[tableName] = true;\n            break;\n          }\n          case \"cross\":\n          case \"inner\": {\n            this.joinsNotNullableMap[tableName] = true;\n            break;\n          }\n          case \"full\": {\n            this.joinsNotNullableMap = Object.fromEntries(\n              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])\n            );\n            this.joinsNotNullableMap[tableName] = false;\n            break;\n          }\n        }\n      }\n      return this;\n    };\n  }\n  /**\n   * Executes a `left join` operation by adding another table to the current query.\n   *\n   * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User; pets: Pet | null; }[] = await db.select()\n   *   .from(users)\n   *   .leftJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number; petId: number | null; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .leftJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  leftJoin = this.createJoin(\"left\");\n  /**\n   * Executes a `right join` operation by adding another table to the current query.\n   *\n   * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User | null; pets: Pet; }[] = await db.select()\n   *   .from(users)\n   *   .rightJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number | null; petId: number; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .rightJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  rightJoin = this.createJoin(\"right\");\n  /**\n   * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n   *\n   * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()\n   *   .from(users)\n   *   .innerJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .innerJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  innerJoin = this.createJoin(\"inner\");\n  /**\n   * Executes a `full join` operation by combining rows from two tables into a new table.\n   *\n   * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User | null; pets: Pet | null; }[] = await db.select()\n   *   .from(users)\n   *   .fullJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number | null; petId: number | null; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .fullJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  fullJoin = this.createJoin(\"full\");\n  /**\n   * Executes a `cross join` operation by combining rows from two tables into a new table.\n   *\n   * Calling this method retrieves all rows from both main and joined tables, merging all rows from each table.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#cross-join}\n   *\n   * @param table the table to join.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users, each user with every pet\n   * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()\n   *   .from(users)\n   *   .crossJoin(pets)\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .crossJoin(pets)\n   * ```\n   */\n  crossJoin = this.createJoin(\"cross\");\n  createSetOperator(type, isAll) {\n    return (rightSelection) => {\n      const rightSelect = typeof rightSelection === \"function\" ? rightSelection(getSQLiteSetOperators()) : rightSelection;\n      if (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n        throw new Error(\n          \"Set operator error (union / intersect / except): selected fields are not the same or are in a different order\"\n        );\n      }\n      this.config.setOperators.push({ type, isAll, rightSelect });\n      return this;\n    };\n  }\n  /**\n   * Adds `union` set operator to the query.\n   *\n   * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all unique names from customers and users tables\n   * await db.select({ name: users.name })\n   *   .from(users)\n   *   .union(\n   *     db.select({ name: customers.name }).from(customers)\n   *   );\n   * // or\n   * import { union } from 'drizzle-orm/sqlite-core'\n   *\n   * await union(\n   *   db.select({ name: users.name }).from(users),\n   *   db.select({ name: customers.name }).from(customers)\n   * );\n   * ```\n   */\n  union = this.createSetOperator(\"union\", false);\n  /**\n   * Adds `union all` set operator to the query.\n   *\n   * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all transaction ids from both online and in-store sales\n   * await db.select({ transaction: onlineSales.transactionId })\n   *   .from(onlineSales)\n   *   .unionAll(\n   *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n   *   );\n   * // or\n   * import { unionAll } from 'drizzle-orm/sqlite-core'\n   *\n   * await unionAll(\n   *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n   *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n   * );\n   * ```\n   */\n  unionAll = this.createSetOperator(\"union\", true);\n  /**\n   * Adds `intersect` set operator to the query.\n   *\n   * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select course names that are offered in both departments A and B\n   * await db.select({ courseName: depA.courseName })\n   *   .from(depA)\n   *   .intersect(\n   *     db.select({ courseName: depB.courseName }).from(depB)\n   *   );\n   * // or\n   * import { intersect } from 'drizzle-orm/sqlite-core'\n   *\n   * await intersect(\n   *   db.select({ courseName: depA.courseName }).from(depA),\n   *   db.select({ courseName: depB.courseName }).from(depB)\n   * );\n   * ```\n   */\n  intersect = this.createSetOperator(\"intersect\", false);\n  /**\n   * Adds `except` set operator to the query.\n   *\n   * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all courses offered in department A but not in department B\n   * await db.select({ courseName: depA.courseName })\n   *   .from(depA)\n   *   .except(\n   *     db.select({ courseName: depB.courseName }).from(depB)\n   *   );\n   * // or\n   * import { except } from 'drizzle-orm/sqlite-core'\n   *\n   * await except(\n   *   db.select({ courseName: depA.courseName }).from(depA),\n   *   db.select({ courseName: depB.courseName }).from(depB)\n   * );\n   * ```\n   */\n  except = this.createSetOperator(\"except\", false);\n  /** @internal */\n  addSetOperators(setOperators) {\n    this.config.setOperators.push(...setOperators);\n    return this;\n  }\n  /**\n   * Adds a `where` clause to the query.\n   *\n   * Calling this method will select only those rows that fulfill a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n   *\n   * @param where the `where` clause.\n   *\n   * @example\n   * You can use conditional operators and `sql function` to filter the rows to be selected.\n   *\n   * ```ts\n   * // Select all cars with green color\n   * await db.select().from(cars).where(eq(cars.color, 'green'));\n   * // or\n   * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n   * ```\n   *\n   * You can logically combine conditional operators with `and()` and `or()` operators:\n   *\n   * ```ts\n   * // Select all BMW cars with a green color\n   * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n   *\n   * // Select all cars with the green or blue color\n   * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n   * ```\n   */\n  where(where) {\n    if (typeof where === \"function\") {\n      where = where(\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n        )\n      );\n    }\n    this.config.where = where;\n    return this;\n  }\n  /**\n   * Adds a `having` clause to the query.\n   *\n   * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n   *\n   * @param having the `having` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all brands with more than one car\n   * await db.select({\n   * \tbrand: cars.brand,\n   * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n   * })\n   *   .from(cars)\n   *   .groupBy(cars.brand)\n   *   .having(({ count }) => gt(count, 1));\n   * ```\n   */\n  having(having) {\n    if (typeof having === \"function\") {\n      having = having(\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n        )\n      );\n    }\n    this.config.having = having;\n    return this;\n  }\n  groupBy(...columns) {\n    if (typeof columns[0] === \"function\") {\n      const groupBy = columns[0](\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"alias\", sqlBehavior: \"sql\" })\n        )\n      );\n      this.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n    } else {\n      this.config.groupBy = columns;\n    }\n    return this;\n  }\n  orderBy(...columns) {\n    if (typeof columns[0] === \"function\") {\n      const orderBy = columns[0](\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"alias\", sqlBehavior: \"sql\" })\n        )\n      );\n      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n      if (this.config.setOperators.length > 0) {\n        this.config.setOperators.at(-1).orderBy = orderByArray;\n      } else {\n        this.config.orderBy = orderByArray;\n      }\n    } else {\n      const orderByArray = columns;\n      if (this.config.setOperators.length > 0) {\n        this.config.setOperators.at(-1).orderBy = orderByArray;\n      } else {\n        this.config.orderBy = orderByArray;\n      }\n    }\n    return this;\n  }\n  /**\n   * Adds a `limit` clause to the query.\n   *\n   * Calling this method will set the maximum number of rows that will be returned by this query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n   *\n   * @param limit the `limit` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Get the first 10 people from this query.\n   * await db.select().from(people).limit(10);\n   * ```\n   */\n  limit(limit) {\n    if (this.config.setOperators.length > 0) {\n      this.config.setOperators.at(-1).limit = limit;\n    } else {\n      this.config.limit = limit;\n    }\n    return this;\n  }\n  /**\n   * Adds an `offset` clause to the query.\n   *\n   * Calling this method will skip a number of rows when returning results from this query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n   *\n   * @param offset the `offset` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Get the 10th-20th people from this query.\n   * await db.select().from(people).offset(10).limit(10);\n   * ```\n   */\n  offset(offset) {\n    if (this.config.setOperators.length > 0) {\n      this.config.setOperators.at(-1).offset = offset;\n    } else {\n      this.config.offset = offset;\n    }\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildSelectQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  as(alias) {\n    const usedTables = [];\n    usedTables.push(...extractUsedTable(this.config.table));\n    if (this.config.joins) {\n      for (const it of this.config.joins) usedTables.push(...extractUsedTable(it.table));\n    }\n    return new Proxy(\n      new Subquery(this.getSQL(), this.config.fields, alias, false, [...new Set(usedTables)]),\n      new SelectionProxyHandler({ alias, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n    );\n  }\n  /** @internal */\n  getSelectedFields() {\n    return new Proxy(\n      this.config.fields,\n      new SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n    );\n  }\n  $dynamic() {\n    return this;\n  }\n}\nclass SQLiteSelectBase extends SQLiteSelectQueryBuilderBase {\n  static [entityKind] = \"SQLiteSelect\";\n  /** @internal */\n  _prepare(isOneTimeQuery = true) {\n    if (!this.session) {\n      throw new Error(\"Cannot execute a query on a query builder. Please use a database instance instead.\");\n    }\n    const fieldsList = orderSelectedFields(this.config.fields);\n    const query = this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](\n      this.dialect.sqlToQuery(this.getSQL()),\n      fieldsList,\n      \"all\",\n      true,\n      void 0,\n      {\n        type: \"select\",\n        tables: [...this.usedTables]\n      },\n      this.cacheConfig\n    );\n    query.joinsNotNullableMap = this.joinsNotNullableMap;\n    return query;\n  }\n  $withCache(config) {\n    this.cacheConfig = config === void 0 ? { config: {}, enable: true, autoInvalidate: true } : config === false ? { enable: false } : { enable: true, autoInvalidate: true, ...config };\n    return this;\n  }\n  prepare() {\n    return this._prepare(false);\n  }\n  run = (placeholderValues) => {\n    return this._prepare().run(placeholderValues);\n  };\n  all = (placeholderValues) => {\n    return this._prepare().all(placeholderValues);\n  };\n  get = (placeholderValues) => {\n    return this._prepare().get(placeholderValues);\n  };\n  values = (placeholderValues) => {\n    return this._prepare().values(placeholderValues);\n  };\n  async execute() {\n    return this.all();\n  }\n}\napplyMixins(SQLiteSelectBase, [QueryPromise]);\nfunction createSetOperator(type, isAll) {\n  return (leftSelect, rightSelect, ...restSelects) => {\n    const setOperators = [rightSelect, ...restSelects].map((select) => ({\n      type,\n      isAll,\n      rightSelect: select\n    }));\n    for (const setOperator of setOperators) {\n      if (!haveSameKeys(leftSelect.getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n        throw new Error(\n          \"Set operator error (union / intersect / except): selected fields are not the same or are in a different order\"\n        );\n      }\n    }\n    return leftSelect.addSetOperators(setOperators);\n  };\n}\nconst getSQLiteSetOperators = () => ({\n  union,\n  unionAll,\n  intersect,\n  except\n});\nconst union = createSetOperator(\"union\", false);\nconst unionAll = createSetOperator(\"union\", true);\nconst intersect = createSetOperator(\"intersect\", false);\nconst except = createSetOperator(\"except\", false);\nexport {\n  SQLiteSelectBase,\n  SQLiteSelectBuilder,\n  SQLiteSelectQueryBuilderBase,\n  except,\n  intersect,\n  union,\n  unionAll\n};\n//# sourceMappingURL=select.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { SQLiteDialect, SQLiteSyncDialect } from \"../dialect.js\";\nimport { WithSubquery } from \"../../subquery.js\";\nimport { SQLiteSelectBuilder } from \"./select.js\";\nclass QueryBuilder {\n  static [entityKind] = \"SQLiteQueryBuilder\";\n  dialect;\n  dialectConfig;\n  constructor(dialect) {\n    this.dialect = is(dialect, SQLiteDialect) ? dialect : void 0;\n    this.dialectConfig = is(dialect, SQLiteDialect) ? void 0 : dialect;\n  }\n  $with = (alias, selection) => {\n    const queryBuilder = this;\n    const as = (qb) => {\n      if (typeof qb === \"function\") {\n        qb = qb(queryBuilder);\n      }\n      return new Proxy(\n        new WithSubquery(\n          qb.getSQL(),\n          selection ?? (\"getSelectedFields\" in qb ? qb.getSelectedFields() ?? {} : {}),\n          alias,\n          true\n        ),\n        new SelectionProxyHandler({ alias, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n      );\n    };\n    return { as };\n  };\n  with(...queries) {\n    const self = this;\n    function select(fields) {\n      return new SQLiteSelectBuilder({\n        fields: fields ?? void 0,\n        session: void 0,\n        dialect: self.getDialect(),\n        withList: queries\n      });\n    }\n    function selectDistinct(fields) {\n      return new SQLiteSelectBuilder({\n        fields: fields ?? void 0,\n        session: void 0,\n        dialect: self.getDialect(),\n        withList: queries,\n        distinct: true\n      });\n    }\n    return { select, selectDistinct };\n  }\n  select(fields) {\n    return new SQLiteSelectBuilder({ fields: fields ?? void 0, session: void 0, dialect: this.getDialect() });\n  }\n  selectDistinct(fields) {\n    return new SQLiteSelectBuilder({\n      fields: fields ?? void 0,\n      session: void 0,\n      dialect: this.getDialect(),\n      distinct: true\n    });\n  }\n  // Lazy load dialect to avoid circular dependency\n  getDialect() {\n    if (!this.dialect) {\n      this.dialect = new SQLiteSyncDialect(this.dialectConfig);\n    }\n    return this.dialect;\n  }\n}\nexport {\n  QueryBuilder\n};\n//# sourceMappingURL=query-builder.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { Param, SQL, sql } from \"../../sql/sql.js\";\nimport { SQLiteTable } from \"../table.js\";\nimport { Columns, Table } from \"../../table.js\";\nimport { haveSameKeys, mapUpdateSet, orderSelectedFields } from \"../../utils.js\";\nimport { extractUsedTable } from \"../utils.js\";\nimport { QueryBuilder } from \"./query-builder.js\";\nclass SQLiteInsertBuilder {\n  constructor(table, session, dialect, withList) {\n    this.table = table;\n    this.session = session;\n    this.dialect = dialect;\n    this.withList = withList;\n  }\n  static [entityKind] = \"SQLiteInsertBuilder\";\n  values(values) {\n    values = Array.isArray(values) ? values : [values];\n    if (values.length === 0) {\n      throw new Error(\"values() must be called with at least one value\");\n    }\n    const mappedValues = values.map((entry) => {\n      const result = {};\n      const cols = this.table[Table.Symbol.Columns];\n      for (const colKey of Object.keys(entry)) {\n        const colValue = entry[colKey];\n        result[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n      }\n      return result;\n    });\n    return new SQLiteInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);\n  }\n  select(selectQuery) {\n    const select = typeof selectQuery === \"function\" ? selectQuery(new QueryBuilder()) : selectQuery;\n    if (!is(select, SQL) && !haveSameKeys(this.table[Columns], select._.selectedFields)) {\n      throw new Error(\n        \"Insert select error: selected fields are not the same or are in a different order compared to the table definition\"\n      );\n    }\n    return new SQLiteInsertBase(this.table, select, this.session, this.dialect, this.withList, true);\n  }\n}\nclass SQLiteInsertBase extends QueryPromise {\n  constructor(table, values, session, dialect, withList, select) {\n    super();\n    this.session = session;\n    this.dialect = dialect;\n    this.config = { table, values, withList, select };\n  }\n  static [entityKind] = \"SQLiteInsert\";\n  /** @internal */\n  config;\n  returning(fields = this.config.table[SQLiteTable.Symbol.Columns]) {\n    this.config.returning = orderSelectedFields(fields);\n    return this;\n  }\n  /**\n   * Adds an `on conflict do nothing` clause to the query.\n   *\n   * Calling this method simply avoids inserting a row as its alternative action.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n   *\n   * @param config The `target` and `where` clauses.\n   *\n   * @example\n   * ```ts\n   * // Insert one row and cancel the insert if there's a conflict\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoNothing();\n   *\n   * // Explicitly specify conflict target\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoNothing({ target: cars.id });\n   * ```\n   */\n  onConflictDoNothing(config = {}) {\n    if (!this.config.onConflict) this.config.onConflict = [];\n    if (config.target === void 0) {\n      this.config.onConflict.push(sql` on conflict do nothing`);\n    } else {\n      const targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n      const whereSql = config.where ? sql` where ${config.where}` : sql``;\n      this.config.onConflict.push(sql` on conflict ${targetSql} do nothing${whereSql}`);\n    }\n    return this;\n  }\n  /**\n   * Adds an `on conflict do update` clause to the query.\n   *\n   * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n   *\n   * @param config The `target`, `set` and `where` clauses.\n   *\n   * @example\n   * ```ts\n   * // Update the row if there's a conflict\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoUpdate({\n   *     target: cars.id,\n   *     set: { brand: 'Porsche' }\n   *   });\n   *\n   * // Upsert with 'where' clause\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoUpdate({\n   *     target: cars.id,\n   *     set: { brand: 'newBMW' },\n   *     where: sql`${cars.createdAt} > '2023-01-01'::date`,\n   *   });\n   * ```\n   */\n  onConflictDoUpdate(config) {\n    if (config.where && (config.targetWhere || config.setWhere)) {\n      throw new Error(\n        'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.'\n      );\n    }\n    if (!this.config.onConflict) this.config.onConflict = [];\n    const whereSql = config.where ? sql` where ${config.where}` : void 0;\n    const targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : void 0;\n    const setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : void 0;\n    const targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n    const setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n    this.config.onConflict.push(\n      sql` on conflict ${targetSql}${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`\n    );\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildInsertQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  /** @internal */\n  _prepare(isOneTimeQuery = true) {\n    return this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](\n      this.dialect.sqlToQuery(this.getSQL()),\n      this.config.returning,\n      this.config.returning ? \"all\" : \"run\",\n      true,\n      void 0,\n      {\n        type: \"insert\",\n        tables: extractUsedTable(this.config.table)\n      }\n    );\n  }\n  prepare() {\n    return this._prepare(false);\n  }\n  run = (placeholderValues) => {\n    return this._prepare().run(placeholderValues);\n  };\n  all = (placeholderValues) => {\n    return this._prepare().all(placeholderValues);\n  };\n  get = (placeholderValues) => {\n    return this._prepare().get(placeholderValues);\n  };\n  values = (placeholderValues) => {\n    return this._prepare().values(placeholderValues);\n  };\n  async execute() {\n    return this.config.returning ? this.all() : this.run();\n  }\n  $dynamic() {\n    return this;\n  }\n}\nexport {\n  SQLiteInsertBase,\n  SQLiteInsertBuilder\n};\n//# sourceMappingURL=insert.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { SQLiteTable } from \"../table.js\";\nimport { Subquery } from \"../../subquery.js\";\nimport { Table } from \"../../table.js\";\nimport {\n  getTableLikeName,\n  mapUpdateSet,\n  orderSelectedFields\n} from \"../../utils.js\";\nimport { ViewBaseConfig } from \"../../view-common.js\";\nimport { extractUsedTable } from \"../utils.js\";\nimport { SQLiteViewBase } from \"../view-base.js\";\nclass SQLiteUpdateBuilder {\n  constructor(table, session, dialect, withList) {\n    this.table = table;\n    this.session = session;\n    this.dialect = dialect;\n    this.withList = withList;\n  }\n  static [entityKind] = \"SQLiteUpdateBuilder\";\n  set(values) {\n    return new SQLiteUpdateBase(\n      this.table,\n      mapUpdateSet(this.table, values),\n      this.session,\n      this.dialect,\n      this.withList\n    );\n  }\n}\nclass SQLiteUpdateBase extends QueryPromise {\n  constructor(table, set, session, dialect, withList) {\n    super();\n    this.session = session;\n    this.dialect = dialect;\n    this.config = { set, table, withList, joins: [] };\n  }\n  static [entityKind] = \"SQLiteUpdate\";\n  /** @internal */\n  config;\n  from(source) {\n    this.config.from = source;\n    return this;\n  }\n  createJoin(joinType) {\n    return (table, on) => {\n      const tableName = getTableLikeName(table);\n      if (typeof tableName === \"string\" && this.config.joins.some((join) => join.alias === tableName)) {\n        throw new Error(`Alias \"${tableName}\" is already used in this query`);\n      }\n      if (typeof on === \"function\") {\n        const from = this.config.from ? is(table, SQLiteTable) ? table[Table.Symbol.Columns] : is(table, Subquery) ? table._.selectedFields : is(table, SQLiteViewBase) ? table[ViewBaseConfig].selectedFields : void 0 : void 0;\n        on = on(\n          new Proxy(\n            this.config.table[Table.Symbol.Columns],\n            new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n          ),\n          from && new Proxy(\n            from,\n            new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n          )\n        );\n      }\n      this.config.joins.push({ on, table, joinType, alias: tableName });\n      return this;\n    };\n  }\n  leftJoin = this.createJoin(\"left\");\n  rightJoin = this.createJoin(\"right\");\n  innerJoin = this.createJoin(\"inner\");\n  fullJoin = this.createJoin(\"full\");\n  /**\n   * Adds a 'where' clause to the query.\n   *\n   * Calling this method will update only those rows that fulfill a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/update}\n   *\n   * @param where the 'where' clause.\n   *\n   * @example\n   * You can use conditional operators and `sql function` to filter the rows to be updated.\n   *\n   * ```ts\n   * // Update all cars with green color\n   * db.update(cars).set({ color: 'red' })\n   *   .where(eq(cars.color, 'green'));\n   * // or\n   * db.update(cars).set({ color: 'red' })\n   *   .where(sql`${cars.color} = 'green'`)\n   * ```\n   *\n   * You can logically combine conditional operators with `and()` and `or()` operators:\n   *\n   * ```ts\n   * // Update all BMW cars with a green color\n   * db.update(cars).set({ color: 'red' })\n   *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n   *\n   * // Update all cars with the green or blue color\n   * db.update(cars).set({ color: 'red' })\n   *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n   * ```\n   */\n  where(where) {\n    this.config.where = where;\n    return this;\n  }\n  orderBy(...columns) {\n    if (typeof columns[0] === \"function\") {\n      const orderBy = columns[0](\n        new Proxy(\n          this.config.table[Table.Symbol.Columns],\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"alias\", sqlBehavior: \"sql\" })\n        )\n      );\n      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n      this.config.orderBy = orderByArray;\n    } else {\n      const orderByArray = columns;\n      this.config.orderBy = orderByArray;\n    }\n    return this;\n  }\n  limit(limit) {\n    this.config.limit = limit;\n    return this;\n  }\n  returning(fields = this.config.table[SQLiteTable.Symbol.Columns]) {\n    this.config.returning = orderSelectedFields(fields);\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildUpdateQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  /** @internal */\n  _prepare(isOneTimeQuery = true) {\n    return this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](\n      this.dialect.sqlToQuery(this.getSQL()),\n      this.config.returning,\n      this.config.returning ? \"all\" : \"run\",\n      true,\n      void 0,\n      {\n        type: \"insert\",\n        tables: extractUsedTable(this.config.table)\n      }\n    );\n  }\n  prepare() {\n    return this._prepare(false);\n  }\n  run = (placeholderValues) => {\n    return this._prepare().run(placeholderValues);\n  };\n  all = (placeholderValues) => {\n    return this._prepare().all(placeholderValues);\n  };\n  get = (placeholderValues) => {\n    return this._prepare().get(placeholderValues);\n  };\n  values = (placeholderValues) => {\n    return this._prepare().values(placeholderValues);\n  };\n  async execute() {\n    return this.config.returning ? this.all() : this.run();\n  }\n  $dynamic() {\n    return this;\n  }\n}\nexport {\n  SQLiteUpdateBase,\n  SQLiteUpdateBuilder\n};\n//# sourceMappingURL=update.js.map","import { entityKind } from \"../../entity.js\";\nimport { SQL, sql } from \"../../sql/sql.js\";\nclass SQLiteCountBuilder extends SQL {\n  constructor(params) {\n    super(SQLiteCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);\n    this.params = params;\n    this.session = params.session;\n    this.sql = SQLiteCountBuilder.buildCount(\n      params.source,\n      params.filters\n    );\n  }\n  sql;\n  static [entityKind] = \"SQLiteCountBuilderAsync\";\n  [Symbol.toStringTag] = \"SQLiteCountBuilderAsync\";\n  session;\n  static buildEmbeddedCount(source, filters) {\n    return sql`(select count(*) from ${source}${sql.raw(\" where \").if(filters)}${filters})`;\n  }\n  static buildCount(source, filters) {\n    return sql`select count(*) from ${source}${sql.raw(\" where \").if(filters)}${filters}`;\n  }\n  then(onfulfilled, onrejected) {\n    return Promise.resolve(this.session.count(this.sql)).then(\n      onfulfilled,\n      onrejected\n    );\n  }\n  catch(onRejected) {\n    return this.then(void 0, onRejected);\n  }\n  finally(onFinally) {\n    return this.then(\n      (value) => {\n        onFinally?.();\n        return value;\n      },\n      (reason) => {\n        onFinally?.();\n        throw reason;\n      }\n    );\n  }\n}\nexport {\n  SQLiteCountBuilder\n};\n//# sourceMappingURL=count.js.map","import { entityKind } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport {\n  mapRelationalRow\n} from \"../../relations.js\";\nclass RelationalQueryBuilder {\n  constructor(mode, fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session) {\n    this.mode = mode;\n    this.fullSchema = fullSchema;\n    this.schema = schema;\n    this.tableNamesMap = tableNamesMap;\n    this.table = table;\n    this.tableConfig = tableConfig;\n    this.dialect = dialect;\n    this.session = session;\n  }\n  static [entityKind] = \"SQLiteAsyncRelationalQueryBuilder\";\n  findMany(config) {\n    return this.mode === \"sync\" ? new SQLiteSyncRelationalQuery(\n      this.fullSchema,\n      this.schema,\n      this.tableNamesMap,\n      this.table,\n      this.tableConfig,\n      this.dialect,\n      this.session,\n      config ? config : {},\n      \"many\"\n    ) : new SQLiteRelationalQuery(\n      this.fullSchema,\n      this.schema,\n      this.tableNamesMap,\n      this.table,\n      this.tableConfig,\n      this.dialect,\n      this.session,\n      config ? config : {},\n      \"many\"\n    );\n  }\n  findFirst(config) {\n    return this.mode === \"sync\" ? new SQLiteSyncRelationalQuery(\n      this.fullSchema,\n      this.schema,\n      this.tableNamesMap,\n      this.table,\n      this.tableConfig,\n      this.dialect,\n      this.session,\n      config ? { ...config, limit: 1 } : { limit: 1 },\n      \"first\"\n    ) : new SQLiteRelationalQuery(\n      this.fullSchema,\n      this.schema,\n      this.tableNamesMap,\n      this.table,\n      this.tableConfig,\n      this.dialect,\n      this.session,\n      config ? { ...config, limit: 1 } : { limit: 1 },\n      \"first\"\n    );\n  }\n}\nclass SQLiteRelationalQuery extends QueryPromise {\n  constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, config, mode) {\n    super();\n    this.fullSchema = fullSchema;\n    this.schema = schema;\n    this.tableNamesMap = tableNamesMap;\n    this.table = table;\n    this.tableConfig = tableConfig;\n    this.dialect = dialect;\n    this.session = session;\n    this.config = config;\n    this.mode = mode;\n  }\n  static [entityKind] = \"SQLiteAsyncRelationalQuery\";\n  /** @internal */\n  mode;\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildRelationalQuery({\n      fullSchema: this.fullSchema,\n      schema: this.schema,\n      tableNamesMap: this.tableNamesMap,\n      table: this.table,\n      tableConfig: this.tableConfig,\n      queryConfig: this.config,\n      tableAlias: this.tableConfig.tsName\n    }).sql;\n  }\n  /** @internal */\n  _prepare(isOneTimeQuery = false) {\n    const { query, builtQuery } = this._toSQL();\n    return this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](\n      builtQuery,\n      void 0,\n      this.mode === \"first\" ? \"get\" : \"all\",\n      true,\n      (rawRows, mapColumnValue) => {\n        const rows = rawRows.map(\n          (row) => mapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n        );\n        if (this.mode === \"first\") {\n          return rows[0];\n        }\n        return rows;\n      }\n    );\n  }\n  prepare() {\n    return this._prepare(false);\n  }\n  _toSQL() {\n    const query = this.dialect.buildRelationalQuery({\n      fullSchema: this.fullSchema,\n      schema: this.schema,\n      tableNamesMap: this.tableNamesMap,\n      table: this.table,\n      tableConfig: this.tableConfig,\n      queryConfig: this.config,\n      tableAlias: this.tableConfig.tsName\n    });\n    const builtQuery = this.dialect.sqlToQuery(query.sql);\n    return { query, builtQuery };\n  }\n  toSQL() {\n    return this._toSQL().builtQuery;\n  }\n  /** @internal */\n  executeRaw() {\n    if (this.mode === \"first\") {\n      return this._prepare(false).get();\n    }\n    return this._prepare(false).all();\n  }\n  async execute() {\n    return this.executeRaw();\n  }\n}\nclass SQLiteSyncRelationalQuery extends SQLiteRelationalQuery {\n  static [entityKind] = \"SQLiteSyncRelationalQuery\";\n  sync() {\n    return this.executeRaw();\n  }\n}\nexport {\n  RelationalQueryBuilder,\n  SQLiteRelationalQuery,\n  SQLiteSyncRelationalQuery\n};\n//# sourceMappingURL=query.js.map","import { entityKind } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nclass SQLiteRaw extends QueryPromise {\n  constructor(execute, getSQL, action, dialect, mapBatchResult) {\n    super();\n    this.execute = execute;\n    this.getSQL = getSQL;\n    this.dialect = dialect;\n    this.mapBatchResult = mapBatchResult;\n    this.config = { action };\n  }\n  static [entityKind] = \"SQLiteRaw\";\n  /** @internal */\n  config;\n  getQuery() {\n    return { ...this.dialect.sqlToQuery(this.getSQL()), method: this.config.action };\n  }\n  mapResult(result, isFromBatch) {\n    return isFromBatch ? this.mapBatchResult(result) : result;\n  }\n  _prepare() {\n    return this;\n  }\n  /** @internal */\n  isResponseInArrayMode() {\n    return false;\n  }\n}\nexport {\n  SQLiteRaw\n};\n//# sourceMappingURL=raw.js.map","import { entityKind } from \"../entity.js\";\nimport { SelectionProxyHandler } from \"../selection-proxy.js\";\nimport { sql } from \"../sql/sql.js\";\nimport {\n  QueryBuilder,\n  SQLiteDeleteBase,\n  SQLiteInsertBuilder,\n  SQLiteSelectBuilder,\n  SQLiteUpdateBuilder\n} from \"./query-builders/index.js\";\nimport { WithSubquery } from \"../subquery.js\";\nimport { SQLiteCountBuilder } from \"./query-builders/count.js\";\nimport { RelationalQueryBuilder } from \"./query-builders/query.js\";\nimport { SQLiteRaw } from \"./query-builders/raw.js\";\nclass BaseSQLiteDatabase {\n  constructor(resultKind, dialect, session, schema) {\n    this.resultKind = resultKind;\n    this.dialect = dialect;\n    this.session = session;\n    this._ = schema ? {\n      schema: schema.schema,\n      fullSchema: schema.fullSchema,\n      tableNamesMap: schema.tableNamesMap\n    } : {\n      schema: void 0,\n      fullSchema: {},\n      tableNamesMap: {}\n    };\n    this.query = {};\n    const query = this.query;\n    if (this._.schema) {\n      for (const [tableName, columns] of Object.entries(this._.schema)) {\n        query[tableName] = new RelationalQueryBuilder(\n          resultKind,\n          schema.fullSchema,\n          this._.schema,\n          this._.tableNamesMap,\n          schema.fullSchema[tableName],\n          columns,\n          dialect,\n          session\n        );\n      }\n    }\n    this.$cache = { invalidate: async (_params) => {\n    } };\n  }\n  static [entityKind] = \"BaseSQLiteDatabase\";\n  query;\n  /**\n   * Creates a subquery that defines a temporary named result set as a CTE.\n   *\n   * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n   *\n   * @param alias The alias for the subquery.\n   *\n   * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n   *\n   * @example\n   *\n   * ```ts\n   * // Create a subquery with alias 'sq' and use it in the select query\n   * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n   *\n   * const result = await db.with(sq).select().from(sq);\n   * ```\n   *\n   * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n   *\n   * ```ts\n   * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n   * const sq = db.$with('sq').as(db.select({\n   *   name: sql<string>`upper(${users.name})`.as('name'),\n   * })\n   * .from(users));\n   *\n   * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n   * ```\n   */\n  $with = (alias, selection) => {\n    const self = this;\n    const as = (qb) => {\n      if (typeof qb === \"function\") {\n        qb = qb(new QueryBuilder(self.dialect));\n      }\n      return new Proxy(\n        new WithSubquery(\n          qb.getSQL(),\n          selection ?? (\"getSelectedFields\" in qb ? qb.getSelectedFields() ?? {} : {}),\n          alias,\n          true\n        ),\n        new SelectionProxyHandler({ alias, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n      );\n    };\n    return { as };\n  };\n  $count(source, filters) {\n    return new SQLiteCountBuilder({ source, filters, session: this.session });\n  }\n  /**\n   * Incorporates a previously defined CTE (using `$with`) into the main query.\n   *\n   * This method allows the main query to reference a temporary named result set.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n   *\n   * @param queries The CTEs to incorporate into the main query.\n   *\n   * @example\n   *\n   * ```ts\n   * // Define a subquery 'sq' as a CTE using $with\n   * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n   *\n   * // Incorporate the CTE 'sq' into the main query and select from it\n   * const result = await db.with(sq).select().from(sq);\n   * ```\n   */\n  with(...queries) {\n    const self = this;\n    function select(fields) {\n      return new SQLiteSelectBuilder({\n        fields: fields ?? void 0,\n        session: self.session,\n        dialect: self.dialect,\n        withList: queries\n      });\n    }\n    function selectDistinct(fields) {\n      return new SQLiteSelectBuilder({\n        fields: fields ?? void 0,\n        session: self.session,\n        dialect: self.dialect,\n        withList: queries,\n        distinct: true\n      });\n    }\n    function update(table) {\n      return new SQLiteUpdateBuilder(table, self.session, self.dialect, queries);\n    }\n    function insert(into) {\n      return new SQLiteInsertBuilder(into, self.session, self.dialect, queries);\n    }\n    function delete_(from) {\n      return new SQLiteDeleteBase(from, self.session, self.dialect, queries);\n    }\n    return { select, selectDistinct, update, insert, delete: delete_ };\n  }\n  select(fields) {\n    return new SQLiteSelectBuilder({ fields: fields ?? void 0, session: this.session, dialect: this.dialect });\n  }\n  selectDistinct(fields) {\n    return new SQLiteSelectBuilder({\n      fields: fields ?? void 0,\n      session: this.session,\n      dialect: this.dialect,\n      distinct: true\n    });\n  }\n  /**\n   * Creates an update query.\n   *\n   * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n   *\n   * Use `.set()` method to specify which values to update.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/update}\n   *\n   * @param table The table to update.\n   *\n   * @example\n   *\n   * ```ts\n   * // Update all rows in the 'cars' table\n   * await db.update(cars).set({ color: 'red' });\n   *\n   * // Update rows with filters and conditions\n   * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n   *\n   * // Update with returning clause\n   * const updatedCar: Car[] = await db.update(cars)\n   *   .set({ color: 'red' })\n   *   .where(eq(cars.id, 1))\n   *   .returning();\n   * ```\n   */\n  update(table) {\n    return new SQLiteUpdateBuilder(table, this.session, this.dialect);\n  }\n  $cache;\n  /**\n   * Creates an insert query.\n   *\n   * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/insert}\n   *\n   * @param table The table to insert into.\n   *\n   * @example\n   *\n   * ```ts\n   * // Insert one row\n   * await db.insert(cars).values({ brand: 'BMW' });\n   *\n   * // Insert multiple rows\n   * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n   *\n   * // Insert with returning clause\n   * const insertedCar: Car[] = await db.insert(cars)\n   *   .values({ brand: 'BMW' })\n   *   .returning();\n   * ```\n   */\n  insert(into) {\n    return new SQLiteInsertBuilder(into, this.session, this.dialect);\n  }\n  /**\n   * Creates a delete query.\n   *\n   * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/delete}\n   *\n   * @param table The table to delete from.\n   *\n   * @example\n   *\n   * ```ts\n   * // Delete all rows in the 'cars' table\n   * await db.delete(cars);\n   *\n   * // Delete rows with filters and conditions\n   * await db.delete(cars).where(eq(cars.color, 'green'));\n   *\n   * // Delete with returning clause\n   * const deletedCar: Car[] = await db.delete(cars)\n   *   .where(eq(cars.id, 1))\n   *   .returning();\n   * ```\n   */\n  delete(from) {\n    return new SQLiteDeleteBase(from, this.session, this.dialect);\n  }\n  run(query) {\n    const sequel = typeof query === \"string\" ? sql.raw(query) : query.getSQL();\n    if (this.resultKind === \"async\") {\n      return new SQLiteRaw(\n        async () => this.session.run(sequel),\n        () => sequel,\n        \"run\",\n        this.dialect,\n        this.session.extractRawRunValueFromBatchResult.bind(this.session)\n      );\n    }\n    return this.session.run(sequel);\n  }\n  all(query) {\n    const sequel = typeof query === \"string\" ? sql.raw(query) : query.getSQL();\n    if (this.resultKind === \"async\") {\n      return new SQLiteRaw(\n        async () => this.session.all(sequel),\n        () => sequel,\n        \"all\",\n        this.dialect,\n        this.session.extractRawAllValueFromBatchResult.bind(this.session)\n      );\n    }\n    return this.session.all(sequel);\n  }\n  get(query) {\n    const sequel = typeof query === \"string\" ? sql.raw(query) : query.getSQL();\n    if (this.resultKind === \"async\") {\n      return new SQLiteRaw(\n        async () => this.session.get(sequel),\n        () => sequel,\n        \"get\",\n        this.dialect,\n        this.session.extractRawGetValueFromBatchResult.bind(this.session)\n      );\n    }\n    return this.session.get(sequel);\n  }\n  values(query) {\n    const sequel = typeof query === \"string\" ? sql.raw(query) : query.getSQL();\n    if (this.resultKind === \"async\") {\n      return new SQLiteRaw(\n        async () => this.session.values(sequel),\n        () => sequel,\n        \"values\",\n        this.dialect,\n        this.session.extractRawValuesValueFromBatchResult.bind(this.session)\n      );\n    }\n    return this.session.values(sequel);\n  }\n  transaction(transaction, config) {\n    return this.session.transaction(transaction, config);\n  }\n}\nconst withReplicas = (primary, replicas, getReplica = () => replicas[Math.floor(Math.random() * replicas.length)]) => {\n  const select = (...args) => getReplica(replicas).select(...args);\n  const selectDistinct = (...args) => getReplica(replicas).selectDistinct(...args);\n  const $count = (...args) => getReplica(replicas).$count(...args);\n  const $with = (...args) => getReplica(replicas).with(...args);\n  const update = (...args) => primary.update(...args);\n  const insert = (...args) => primary.insert(...args);\n  const $delete = (...args) => primary.delete(...args);\n  const run = (...args) => primary.run(...args);\n  const all = (...args) => primary.all(...args);\n  const get = (...args) => primary.get(...args);\n  const values = (...args) => primary.values(...args);\n  const transaction = (...args) => primary.transaction(...args);\n  return {\n    ...primary,\n    update,\n    insert,\n    delete: $delete,\n    run,\n    all,\n    get,\n    values,\n    transaction,\n    $primary: primary,\n    select,\n    selectDistinct,\n    $count,\n    with: $with,\n    get query() {\n      return getReplica(replicas).query;\n    }\n  };\n};\nexport {\n  BaseSQLiteDatabase,\n  withReplicas\n};\n//# sourceMappingURL=db.js.map","import { entityKind } from \"../../entity.js\";\nclass Cache {\n  static [entityKind] = \"Cache\";\n}\nclass NoopCache extends Cache {\n  strategy() {\n    return \"all\";\n  }\n  static [entityKind] = \"NoopCache\";\n  async get(_key) {\n    return void 0;\n  }\n  async put(_hashedQuery, _response, _tables, _config) {\n  }\n  async onMutate(_params) {\n  }\n}\nasync function hashQuery(sql, params) {\n  const dataToHash = `${sql}-${JSON.stringify(params)}`;\n  const encoder = new TextEncoder();\n  const data = encoder.encode(dataToHash);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n  const hashArray = [...new Uint8Array(hashBuffer)];\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  return hashHex;\n}\nexport {\n  Cache,\n  NoopCache,\n  hashQuery\n};\n//# sourceMappingURL=cache.js.map","import { hashQuery, NoopCache } from \"../cache/core/cache.js\";\nimport { entityKind, is } from \"../entity.js\";\nimport { DrizzleError, DrizzleQueryError, TransactionRollbackError } from \"../errors.js\";\nimport { QueryPromise } from \"../query-promise.js\";\nimport { BaseSQLiteDatabase } from \"./db.js\";\nclass ExecuteResultSync extends QueryPromise {\n  constructor(resultCb) {\n    super();\n    this.resultCb = resultCb;\n  }\n  static [entityKind] = \"ExecuteResultSync\";\n  async execute() {\n    return this.resultCb();\n  }\n  sync() {\n    return this.resultCb();\n  }\n}\nclass SQLitePreparedQuery {\n  constructor(mode, executeMethod, query, cache, queryMetadata, cacheConfig) {\n    this.mode = mode;\n    this.executeMethod = executeMethod;\n    this.query = query;\n    this.cache = cache;\n    this.queryMetadata = queryMetadata;\n    this.cacheConfig = cacheConfig;\n    if (cache && cache.strategy() === \"all\" && cacheConfig === void 0) {\n      this.cacheConfig = { enable: true, autoInvalidate: true };\n    }\n    if (!this.cacheConfig?.enable) {\n      this.cacheConfig = void 0;\n    }\n  }\n  static [entityKind] = \"PreparedQuery\";\n  /** @internal */\n  joinsNotNullableMap;\n  /** @internal */\n  async queryWithCache(queryString, params, query) {\n    if (this.cache === void 0 || is(this.cache, NoopCache) || this.queryMetadata === void 0) {\n      try {\n        return await query();\n      } catch (e) {\n        throw new DrizzleQueryError(queryString, params, e);\n      }\n    }\n    if (this.cacheConfig && !this.cacheConfig.enable) {\n      try {\n        return await query();\n      } catch (e) {\n        throw new DrizzleQueryError(queryString, params, e);\n      }\n    }\n    if ((this.queryMetadata.type === \"insert\" || this.queryMetadata.type === \"update\" || this.queryMetadata.type === \"delete\") && this.queryMetadata.tables.length > 0) {\n      try {\n        const [res] = await Promise.all([\n          query(),\n          this.cache.onMutate({ tables: this.queryMetadata.tables })\n        ]);\n        return res;\n      } catch (e) {\n        throw new DrizzleQueryError(queryString, params, e);\n      }\n    }\n    if (!this.cacheConfig) {\n      try {\n        return await query();\n      } catch (e) {\n        throw new DrizzleQueryError(queryString, params, e);\n      }\n    }\n    if (this.queryMetadata.type === \"select\") {\n      const fromCache = await this.cache.get(\n        this.cacheConfig.tag ?? (await hashQuery(queryString, params)),\n        this.queryMetadata.tables,\n        this.cacheConfig.tag !== void 0,\n        this.cacheConfig.autoInvalidate\n      );\n      if (fromCache === void 0) {\n        let result;\n        try {\n          result = await query();\n        } catch (e) {\n          throw new DrizzleQueryError(queryString, params, e);\n        }\n        await this.cache.put(\n          this.cacheConfig.tag ?? (await hashQuery(queryString, params)),\n          result,\n          // make sure we send tables that were used in a query only if user wants to invalidate it on each write\n          this.cacheConfig.autoInvalidate ? this.queryMetadata.tables : [],\n          this.cacheConfig.tag !== void 0,\n          this.cacheConfig.config\n        );\n        return result;\n      }\n      return fromCache;\n    }\n    try {\n      return await query();\n    } catch (e) {\n      throw new DrizzleQueryError(queryString, params, e);\n    }\n  }\n  getQuery() {\n    return this.query;\n  }\n  mapRunResult(result, _isFromBatch) {\n    return result;\n  }\n  mapAllResult(_result, _isFromBatch) {\n    throw new Error(\"Not implemented\");\n  }\n  mapGetResult(_result, _isFromBatch) {\n    throw new Error(\"Not implemented\");\n  }\n  execute(placeholderValues) {\n    if (this.mode === \"async\") {\n      return this[this.executeMethod](placeholderValues);\n    }\n    return new ExecuteResultSync(() => this[this.executeMethod](placeholderValues));\n  }\n  mapResult(response, isFromBatch) {\n    switch (this.executeMethod) {\n      case \"run\": {\n        return this.mapRunResult(response, isFromBatch);\n      }\n      case \"all\": {\n        return this.mapAllResult(response, isFromBatch);\n      }\n      case \"get\": {\n        return this.mapGetResult(response, isFromBatch);\n      }\n    }\n  }\n}\nclass SQLiteSession {\n  constructor(dialect) {\n    this.dialect = dialect;\n  }\n  static [entityKind] = \"SQLiteSession\";\n  prepareOneTimeQuery(query, fields, executeMethod, isResponseInArrayMode, customResultMapper, queryMetadata, cacheConfig) {\n    return this.prepareQuery(\n      query,\n      fields,\n      executeMethod,\n      isResponseInArrayMode,\n      customResultMapper,\n      queryMetadata,\n      cacheConfig\n    );\n  }\n  run(query) {\n    const staticQuery = this.dialect.sqlToQuery(query);\n    try {\n      return this.prepareOneTimeQuery(staticQuery, void 0, \"run\", false).run();\n    } catch (err) {\n      throw new DrizzleError({ cause: err, message: `Failed to run the query '${staticQuery.sql}'` });\n    }\n  }\n  /** @internal */\n  extractRawRunValueFromBatchResult(result) {\n    return result;\n  }\n  all(query) {\n    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), void 0, \"run\", false).all();\n  }\n  /** @internal */\n  extractRawAllValueFromBatchResult(_result) {\n    throw new Error(\"Not implemented\");\n  }\n  get(query) {\n    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), void 0, \"run\", false).get();\n  }\n  /** @internal */\n  extractRawGetValueFromBatchResult(_result) {\n    throw new Error(\"Not implemented\");\n  }\n  values(query) {\n    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), void 0, \"run\", false).values();\n  }\n  async count(sql) {\n    const result = await this.values(sql);\n    return result[0][0];\n  }\n  /** @internal */\n  extractRawValuesValueFromBatchResult(_result) {\n    throw new Error(\"Not implemented\");\n  }\n}\nclass SQLiteTransaction extends BaseSQLiteDatabase {\n  constructor(resultType, dialect, session, schema, nestedIndex = 0) {\n    super(resultType, dialect, session, schema);\n    this.schema = schema;\n    this.nestedIndex = nestedIndex;\n  }\n  static [entityKind] = \"SQLiteTransaction\";\n  rollback() {\n    throw new TransactionRollbackError();\n  }\n}\nexport {\n  ExecuteResultSync,\n  SQLitePreparedQuery,\n  SQLiteSession,\n  SQLiteTransaction\n};\n//# sourceMappingURL=session.js.map","import { NoopCache } from \"../cache/core/index.js\";\nimport { entityKind } from \"../entity.js\";\nimport { NoopLogger } from \"../logger.js\";\nimport { fillPlaceholders, sql } from \"../sql/sql.js\";\nimport { SQLiteTransaction } from \"../sqlite-core/index.js\";\nimport {\n  SQLitePreparedQuery as PreparedQueryBase,\n  SQLiteSession\n} from \"../sqlite-core/session.js\";\nimport { mapResultRow } from \"../utils.js\";\nclass BetterSQLiteSession extends SQLiteSession {\n  constructor(client, dialect, schema, options = {}) {\n    super(dialect);\n    this.client = client;\n    this.schema = schema;\n    this.logger = options.logger ?? new NoopLogger();\n    this.cache = options.cache ?? new NoopCache();\n  }\n  static [entityKind] = \"BetterSQLiteSession\";\n  logger;\n  cache;\n  prepareQuery(query, fields, executeMethod, isResponseInArrayMode, customResultMapper, queryMetadata, cacheConfig) {\n    const stmt = this.client.prepare(query.sql);\n    return new PreparedQuery(\n      stmt,\n      query,\n      this.logger,\n      this.cache,\n      queryMetadata,\n      cacheConfig,\n      fields,\n      executeMethod,\n      isResponseInArrayMode,\n      customResultMapper\n    );\n  }\n  transaction(transaction, config = {}) {\n    const tx = new BetterSQLiteTransaction(\"sync\", this.dialect, this, this.schema);\n    const nativeTx = this.client.transaction(transaction);\n    return nativeTx[config.behavior ?? \"deferred\"](tx);\n  }\n}\nclass BetterSQLiteTransaction extends SQLiteTransaction {\n  static [entityKind] = \"BetterSQLiteTransaction\";\n  transaction(transaction) {\n    const savepointName = `sp${this.nestedIndex}`;\n    const tx = new BetterSQLiteTransaction(\"sync\", this.dialect, this.session, this.schema, this.nestedIndex + 1);\n    this.session.run(sql.raw(`savepoint ${savepointName}`));\n    try {\n      const result = transaction(tx);\n      this.session.run(sql.raw(`release savepoint ${savepointName}`));\n      return result;\n    } catch (err) {\n      this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));\n      throw err;\n    }\n  }\n}\nclass PreparedQuery extends PreparedQueryBase {\n  constructor(stmt, query, logger, cache, queryMetadata, cacheConfig, fields, executeMethod, _isResponseInArrayMode, customResultMapper) {\n    super(\"sync\", executeMethod, query, cache, queryMetadata, cacheConfig);\n    this.stmt = stmt;\n    this.logger = logger;\n    this.fields = fields;\n    this._isResponseInArrayMode = _isResponseInArrayMode;\n    this.customResultMapper = customResultMapper;\n  }\n  static [entityKind] = \"BetterSQLitePreparedQuery\";\n  run(placeholderValues) {\n    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n    this.logger.logQuery(this.query.sql, params);\n    return this.stmt.run(...params);\n  }\n  all(placeholderValues) {\n    const { fields, joinsNotNullableMap, query, logger, stmt, customResultMapper } = this;\n    if (!fields && !customResultMapper) {\n      const params = fillPlaceholders(query.params, placeholderValues ?? {});\n      logger.logQuery(query.sql, params);\n      return stmt.all(...params);\n    }\n    const rows = this.values(placeholderValues);\n    if (customResultMapper) {\n      return customResultMapper(rows);\n    }\n    return rows.map((row) => mapResultRow(fields, row, joinsNotNullableMap));\n  }\n  get(placeholderValues) {\n    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n    this.logger.logQuery(this.query.sql, params);\n    const { fields, stmt, joinsNotNullableMap, customResultMapper } = this;\n    if (!fields && !customResultMapper) {\n      return stmt.get(...params);\n    }\n    const row = stmt.raw().get(...params);\n    if (!row) {\n      return void 0;\n    }\n    if (customResultMapper) {\n      return customResultMapper([row]);\n    }\n    return mapResultRow(fields, row, joinsNotNullableMap);\n  }\n  values(placeholderValues) {\n    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n    this.logger.logQuery(this.query.sql, params);\n    return this.stmt.raw().all(...params);\n  }\n  /** @internal */\n  isResponseInArrayMode() {\n    return this._isResponseInArrayMode;\n  }\n}\nexport {\n  BetterSQLiteSession,\n  BetterSQLiteTransaction,\n  PreparedQuery\n};\n//# sourceMappingURL=session.js.map","import Client from \"better-sqlite3\";\nimport { entityKind } from \"../entity.js\";\nimport { DefaultLogger } from \"../logger.js\";\nimport {\n  createTableRelationsHelpers,\n  extractTablesRelationalConfig\n} from \"../relations.js\";\nimport { BaseSQLiteDatabase } from \"../sqlite-core/db.js\";\nimport { SQLiteSyncDialect } from \"../sqlite-core/dialect.js\";\nimport { isConfig } from \"../utils.js\";\nimport { BetterSQLiteSession } from \"./session.js\";\nclass BetterSQLite3Database extends BaseSQLiteDatabase {\n  static [entityKind] = \"BetterSQLite3Database\";\n}\nfunction construct(client, config = {}) {\n  const dialect = new SQLiteSyncDialect({ casing: config.casing });\n  let logger;\n  if (config.logger === true) {\n    logger = new DefaultLogger();\n  } else if (config.logger !== false) {\n    logger = config.logger;\n  }\n  let schema;\n  if (config.schema) {\n    const tablesConfig = extractTablesRelationalConfig(\n      config.schema,\n      createTableRelationsHelpers\n    );\n    schema = {\n      fullSchema: config.schema,\n      schema: tablesConfig.tables,\n      tableNamesMap: tablesConfig.tableNamesMap\n    };\n  }\n  const session = new BetterSQLiteSession(client, dialect, schema, { logger });\n  const db = new BetterSQLite3Database(\"sync\", dialect, session, schema);\n  db.$client = client;\n  return db;\n}\nfunction drizzle(...params) {\n  if (params[0] === void 0 || typeof params[0] === \"string\") {\n    const instance = params[0] === void 0 ? new Client() : new Client(params[0]);\n    return construct(instance, params[1]);\n  }\n  if (isConfig(params[0])) {\n    const { connection, client, ...drizzleConfig } = params[0];\n    if (client) return construct(client, drizzleConfig);\n    if (typeof connection === \"object\") {\n      const { source, ...options } = connection;\n      const instance2 = new Client(source, options);\n      return construct(instance2, drizzleConfig);\n    }\n    const instance = new Client(connection);\n    return construct(instance, drizzleConfig);\n  }\n  return construct(params[0], params[1]);\n}\n((drizzle2) => {\n  function mock(config) {\n    return construct({}, config);\n  }\n  drizzle2.mock = mock;\n})(drizzle || (drizzle = {}));\nexport {\n  BetterSQLite3Database,\n  drizzle\n};\n//# sourceMappingURL=driver.js.map","import \"dotenv/config\";\nimport { drizzle } from \"drizzle-orm/better-sqlite3\";\nimport Database from \"better-sqlite3\";\nimport { sqliteTable, integer, text } from \"drizzle-orm/sqlite-core\";\nconst vehicle$1 = sqliteTable(\"vehicle\", {\n  id: text(\"id\").primaryKey(),\n  plateNumber: text(\"plate_number\").notNull().unique(),\n  ownerId: text(\"owner_id\").notNull(),\n  // FK to user.id\n  model: text(\"model\").notNull(),\n  makeYear: integer(\"make_year\").notNull()\n});\nconst eventLog = sqliteTable(\"event_log\", {\n  id: text(\"id\").primaryKey(),\n  type: text(\"type\").notNull(),\n  // e.g. 'login', 'vehicle_entry', etc.\n  userId: text(\"user_id\"),\n  // optional, can be null for system events\n  details: text(\"details\"),\n  timestamp: integer(\"timestamp\", { mode: \"timestamp\" }).notNull()\n});\nconst guestPassHistory = sqliteTable(\"guest_pass_history\", {\n  id: text(\"id\").primaryKey(),\n  plateNumber: text(\"plate_number\").notNull(),\n  visitTime: integer(\"visit_time\", { mode: \"timestamp\" }).notNull(),\n  durationMinutes: integer(\"duration_minutes\").notNull(),\n  revokedAt: integer(\"revoked_at\", { mode: \"timestamp\" }).notNull()\n});\nconst user = sqliteTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  age: integer(\"age\"),\n  username: text(\"username\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  role: text(\"role\", { enum: [\"guard\", \"resident\"] }).notNull(),\n  // Resident-specific fields\n  name: text(\"name\"),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  carNumber: text(\"car_number\"),\n  houseNumber: text(\"house_number\"),\n  profilePic: text(\"profile_pic\")\n});\nconst admin = sqliteTable(\"admin\", {\n  id: text(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  name: text(\"name\"),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  profilePic: text(\"profile_pic\")\n});\nconst session = sqliteTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").notNull(),\n  expiresAt: integer(\"expires_at\", { mode: \"timestamp\" }).notNull()\n});\nconst guestPass = sqliteTable(\"guest_pass\", {\n  id: text(\"id\").primaryKey(),\n  plateNumber: text(\"plate_number\").notNull(),\n  visitTime: integer(\"visit_time\", { mode: \"timestamp\" }).notNull(),\n  durationMinutes: integer(\"duration_minutes\").notNull(),\n  revokedAt: integer(\"revoked_at\", { mode: \"timestamp\" }),\n  // Added for admin dashboard functionality\n  type: text(\"type\")\n});\nconst guard = sqliteTable(\"guard\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  username: text(\"username\").notNull().unique(),\n  name: text(\"name\"),\n  phone: text(\"phone\"),\n  guardId: text(\"guard_id\").notNull().unique(),\n  profilePic: text(\"profile_pic\")\n  // URL or path to profile picture\n});\nconst vehicle = sqliteTable(\"vehicle\", {\n  id: text(\"id\").primaryKey(),\n  plateNumber: text(\"plate_number\").notNull(),\n  ownerId: text(\"owner_id\").notNull(),\n  model: text(\"model\").notNull(),\n  makeYear: integer(\"make_year\").notNull(),\n  accessTime: integer(\"access_time\", { mode: \"timestamp\" })\n});\nconst schema = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  admin,\n  eventLog,\n  guard,\n  guestPass,\n  guestPassHistory,\n  session,\n  user,\n  vehicle\n}, Symbol.toStringTag, { value: \"Module\" }));\nconst dbUrl = process.env.DATABASE_URL;\nif (!dbUrl) throw new Error(\"DATABASE_URL is not set\");\nconst client = new Database(dbUrl);\nconst db = drizzle(client, { schema });\nexport {\n  guard as a,\n  admin as b,\n  vehicle as c,\n  db as d,\n  eventLog as e,\n  guestPassHistory as f,\n  guestPass as g,\n  session as s,\n  user as u,\n  vehicle$1 as v\n};\n"],"names":["InlineForeignKeys","PreparedQueryBase","Database"],"mappings":"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ACtD,YAAY;AACZ,UAAU;AACV,UAAU,KAAK,OAAO;AACtB,UAAU,KAAK,OAAO,EAAE;AACxB,YAAY,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,GAAG,IAAI;AACtD,YAAY;AACZ,UAAU;AACV,UAAU,KAAK,MAAM,EAAE;AACvB,YAAY,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,WAAW;AACzD,cAAc,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC;AAClF,aAAa;AACb,YAAY,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,GAAG,KAAK;AACvD,YAAY;AACZ,UAAU;AACV;AACA,MAAM;AACN,MAAM,OAAO,IAAI;AACjB,IAAI,CAAC;AACL,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;AACtC,EAAE,iBAAiB,CAAC,IAAI,EAAE,KAAK,EAAE;AACjC,IAAI,OAAO,CAAC,cAAc,KAAK;AAC/B,MAAM,MAAM,WAAW,GAAG,OAAO,cAAc,KAAK,UAAU,GAAG,cAAc,CAAC,qBAAqB,EAAE,CAAC,GAAG,cAAc;AACzH,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,WAAW,CAAC,iBAAiB,EAAE,CAAC,EAAE;AACpF,QAAQ,MAAM,IAAI,KAAK;AACvB,UAAU;AACV,SAAS;AACT,MAAM;AACN,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;AACjE,MAAM,OAAO,IAAI;AACjB,IAAI,CAAC;AACL,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,K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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]}