{"version":3,"file":"base64-EEv6AAhc.js","sources":["../../../node_modules/@oslojs/crypto/dist/sha2/sha512.js","../../../node_modules/@oslojs/encoding/dist/base32.js","../../../node_modules/@oslojs/encoding/dist/base64.js"],"sourcesContent":["import { bigEndian } from \"@oslojs/binary\";\nimport { rotr64 } from \"@oslojs/binary\";\nexport function sha512(data) {\n    const hash = new SHA512();\n    hash.update(data);\n    return hash.digest();\n}\nexport class SharedSHA512 {\n    blockSize = 128;\n    size = 64;\n    blocks = new Uint8Array(128);\n    currentBlockSize = 0;\n    l = 0n;\n    w = new BigUint64Array(80);\n    H;\n    constructor(H) {\n        if (H.byteLength !== 64) {\n            throw new TypeError();\n        }\n        this.H = H;\n    }\n    update(data) {\n        this.l += BigInt(data.byteLength) * 8n;\n        if (this.currentBlockSize + data.byteLength < 128) {\n            this.blocks.set(data, this.currentBlockSize);\n            this.currentBlockSize += data.byteLength;\n            return;\n        }\n        let processed = 0;\n        if (this.currentBlockSize > 0) {\n            const next = data.slice(0, 128 - this.currentBlockSize);\n            this.blocks.set(next, this.currentBlockSize);\n            this.process();\n            processed += next.byteLength;\n            this.currentBlockSize = 0;\n        }\n        while (processed + 128 <= data.byteLength) {\n            const next = data.slice(processed, processed + 128);\n            this.blocks.set(next);\n            this.process();\n            processed += 128;\n            this.currentBlockSize = 0;\n        }\n        if (data.byteLength - processed > 0) {\n            const remaining = data.slice(processed);\n            this.blocks.set(remaining);\n            this.currentBlockSize = remaining.byteLength;\n        }\n    }\n    putDigest(result) {\n        if (result.byteLength > 64 || result.byteLength % 8 !== 0) {\n            throw new TypeError();\n        }\n        this.blocks[this.currentBlockSize] = 0x80;\n        this.currentBlockSize += 1;\n        if (128 - this.currentBlockSize < 16) {\n            this.blocks.fill(0, this.currentBlockSize);\n            this.process();\n            this.currentBlockSize = 0;\n        }\n        this.blocks.fill(0, this.currentBlockSize);\n        bigEndian.putUint64(this.blocks, this.l, this.blockSize - 8);\n        this.process();\n        for (let i = 0; i < result.byteLength / 8; i++) {\n            bigEndian.putUint64(result, this.H[i], i * 8);\n        }\n    }\n    process() {\n        for (let t = 0; t < 16; t++) {\n            this.w[t] =\n                (BigInt(this.blocks[t * 8]) << 56n) |\n                    (BigInt(this.blocks[t * 8 + 1]) << 48n) |\n                    (BigInt(this.blocks[t * 8 + 2]) << 40n) |\n                    (BigInt(this.blocks[t * 8 + 3]) << 32n) |\n                    (BigInt(this.blocks[t * 8 + 4]) << 24n) |\n                    (BigInt(this.blocks[t * 8 + 5]) << 16n) |\n                    (BigInt(this.blocks[t * 8 + 6]) << 8n) |\n                    BigInt(this.blocks[t * 8 + 7]);\n        }\n        for (let t = 16; t < 80; t++) {\n            const sigma1 = (rotr64(this.w[t - 2], 19) ^ rotr64(this.w[t - 2], 61) ^ (this.w[t - 2] >> 6n)) &\n                0xffffffffffffffffn;\n            const sigma0 = (rotr64(this.w[t - 15], 1) ^ rotr64(this.w[t - 15], 8) ^ (this.w[t - 15] >> 7n)) &\n                0xffffffffffffffffn;\n            this.w[t] = (sigma1 + this.w[t - 7] + sigma0 + this.w[t - 16]) & 0xffffffffffffffffn;\n        }\n        let a = this.H[0];\n        let b = this.H[1];\n        let c = this.H[2];\n        let d = this.H[3];\n        let e = this.H[4];\n        let f = this.H[5];\n        let g = this.H[6];\n        let h = this.H[7];\n        for (let t = 0; t < 80; t++) {\n            const sigma1 = (rotr64(e, 14) ^ rotr64(e, 18) ^ rotr64(e, 41)) & 0xffffffffffffffffn;\n            const ch = ((e & f) ^ (~e & g)) & 0xffffffffffffffffn;\n            const t1 = (h + sigma1 + ch + K[t] + this.w[t]) & 0xffffffffffffffffn;\n            const sigma0 = (rotr64(a, 28) ^ rotr64(a, 34) ^ rotr64(a, 39)) & 0xffffffffffffffffn;\n            const maj = ((a & b) ^ (a & c) ^ (b & c)) & 0xffffffffffffffffn;\n            const t2 = (sigma0 + maj) & 0xffffffffffffffffn;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) & 0xffffffffffffffffn;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) & 0xffffffffffffffffn;\n        }\n        this.H[0] = (a + this.H[0]) & 0xffffffffffffffffn;\n        this.H[1] = (b + this.H[1]) & 0xffffffffffffffffn;\n        this.H[2] = (c + this.H[2]) & 0xffffffffffffffffn;\n        this.H[3] = (d + this.H[3]) & 0xffffffffffffffffn;\n        this.H[4] = (e + this.H[4]) & 0xffffffffffffffffn;\n        this.H[5] = (f + this.H[5]) & 0xffffffffffffffffn;\n        this.H[6] = (g + this.H[6]) & 0xffffffffffffffffn;\n        this.H[7] = (h + this.H[7]) & 0xffffffffffffffffn;\n    }\n}\nexport class SHA512 {\n    blockSize = 128;\n    size = 64;\n    sha512 = new SharedSHA512(new BigUint64Array([\n        0x6a09e667f3bcc908n,\n        0xbb67ae8584caa73bn,\n        0x3c6ef372fe94f82bn,\n        0xa54ff53a5f1d36f1n,\n        0x510e527fade682d1n,\n        0x9b05688c2b3e6c1fn,\n        0x1f83d9abfb41bd6bn,\n        0x5be0cd19137e2179n\n    ]));\n    update(data) {\n        this.sha512.update(data);\n    }\n    digest() {\n        const result = new Uint8Array(64);\n        this.sha512.putDigest(result);\n        return result;\n    }\n}\nconst K = new BigUint64Array([\n    0x428a2f98d728ae22n,\n    0x7137449123ef65cdn,\n    0xb5c0fbcfec4d3b2fn,\n    0xe9b5dba58189dbbcn,\n    0x3956c25bf348b538n,\n    0x59f111f1b605d019n,\n    0x923f82a4af194f9bn,\n    0xab1c5ed5da6d8118n,\n    0xd807aa98a3030242n,\n    0x12835b0145706fben,\n    0x243185be4ee4b28cn,\n    0x550c7dc3d5ffb4e2n,\n    0x72be5d74f27b896fn,\n    0x80deb1fe3b1696b1n,\n    0x9bdc06a725c71235n,\n    0xc19bf174cf692694n,\n    0xe49b69c19ef14ad2n,\n    0xefbe4786384f25e3n,\n    0x0fc19dc68b8cd5b5n,\n    0x240ca1cc77ac9c65n,\n    0x2de92c6f592b0275n,\n    0x4a7484aa6ea6e483n,\n    0x5cb0a9dcbd41fbd4n,\n    0x76f988da831153b5n,\n    0x983e5152ee66dfabn,\n    0xa831c66d2db43210n,\n    0xb00327c898fb213fn,\n    0xbf597fc7beef0ee4n,\n    0xc6e00bf33da88fc2n,\n    0xd5a79147930aa725n,\n    0x06ca6351e003826fn,\n    0x142929670a0e6e70n,\n    0x27b70a8546d22ffcn,\n    0x2e1b21385c26c926n,\n    0x4d2c6dfc5ac42aedn,\n    0x53380d139d95b3dfn,\n    0x650a73548baf63den,\n    0x766a0abb3c77b2a8n,\n    0x81c2c92e47edaee6n,\n    0x92722c851482353bn,\n    0xa2bfe8a14cf10364n,\n    0xa81a664bbc423001n,\n    0xc24b8b70d0f89791n,\n    0xc76c51a30654be30n,\n    0xd192e819d6ef5218n,\n    0xd69906245565a910n,\n    0xf40e35855771202an,\n    0x106aa07032bbd1b8n,\n    0x19a4c116b8d2d0c8n,\n    0x1e376c085141ab53n,\n    0x2748774cdf8eeb99n,\n    0x34b0bcb5e19b48a8n,\n    0x391c0cb3c5c95a63n,\n    0x4ed8aa4ae3418acbn,\n    0x5b9cca4f7763e373n,\n    0x682e6ff3d6b2b8a3n,\n    0x748f82ee5defb2fcn,\n    0x78a5636f43172f60n,\n    0x84c87814a1f0ab72n,\n    0x8cc702081a6439ecn,\n    0x90befffa23631e28n,\n    0xa4506cebde82bde9n,\n    0xbef9a3f7b2c67915n,\n    0xc67178f2e372532bn,\n    0xca273eceea26619cn,\n    0xd186b8c721c0c207n,\n    0xeada7dd6cde0eb1en,\n    0xf57d4f7fee6ed178n,\n    0x06f067aa72176fban,\n    0x0a637dc5a2c898a6n,\n    0x113f9804bef90daen,\n    0x1b710b35131c471bn,\n    0x28db77f523047d84n,\n    0x32caab7b40c72493n,\n    0x3c9ebe0a15c9bebcn,\n    0x431d67c49c100d4cn,\n    0x4cc5d4becb3e42b6n,\n    0x597f299cfc657e2an,\n    0x5fcb6fab3ad6faecn,\n    0x6c44198c4a475817n\n]);\n","export function encodeBase32UpperCase(bytes) {\n    return encodeBase32_internal(bytes, base32UpperCaseAlphabet, EncodingPadding.Include);\n}\nexport function encodeBase32UpperCaseNoPadding(bytes) {\n    return encodeBase32_internal(bytes, base32UpperCaseAlphabet, EncodingPadding.None);\n}\nexport function encodeBase32LowerCase(bytes) {\n    return encodeBase32_internal(bytes, base32LowerCaseAlphabet, EncodingPadding.Include);\n}\nexport function encodeBase32LowerCaseNoPadding(bytes) {\n    return encodeBase32_internal(bytes, base32LowerCaseAlphabet, EncodingPadding.None);\n}\n/** Replaced: Use encodeBase32UpperCase() instead. */\nexport function encodeBase32(bytes) {\n    return encodeBase32UpperCase(bytes);\n}\n/** Replaced: Use encodeBase32UpperCaseNoPadding() instead. */\nexport function encodeBase32NoPadding(bytes) {\n    return encodeBase32UpperCaseNoPadding(bytes);\n}\nfunction encodeBase32_internal(bytes, alphabet, padding) {\n    let result = \"\";\n    for (let i = 0; i < bytes.byteLength; i += 5) {\n        let buffer = 0n;\n        let bufferBitSize = 0;\n        for (let j = 0; j < 5 && i + j < bytes.byteLength; j++) {\n            buffer = (buffer << 8n) | BigInt(bytes[i + j]);\n            bufferBitSize += 8;\n        }\n        if (bufferBitSize % 5 !== 0) {\n            buffer = buffer << BigInt(5 - (bufferBitSize % 5));\n            bufferBitSize += 5 - (bufferBitSize % 5);\n        }\n        for (let j = 0; j < 8; j++) {\n            if (bufferBitSize >= 5) {\n                result += alphabet[Number((buffer >> BigInt(bufferBitSize - 5)) & 0x1fn)];\n                bufferBitSize -= 5;\n            }\n            else if (bufferBitSize > 0) {\n                result += alphabet[Number((buffer << BigInt(6 - bufferBitSize)) & 0x3fn)];\n                bufferBitSize = 0;\n            }\n            else if (padding === EncodingPadding.Include) {\n                result += \"=\";\n            }\n        }\n    }\n    return result;\n}\nexport function decodeBase32(encoded) {\n    return decodeBase32_internal(encoded, base32DecodeMap, DecodingPadding.Required);\n}\nexport function decodeBase32IgnorePadding(encoded) {\n    return decodeBase32_internal(encoded, base32DecodeMap, DecodingPadding.Ignore);\n}\nfunction decodeBase32_internal(encoded, decodeMap, padding) {\n    const result = new Uint8Array(Math.ceil(encoded.length / 8) * 5);\n    let totalBytes = 0;\n    for (let i = 0; i < encoded.length; i += 8) {\n        let chunk = 0n;\n        let bitsRead = 0;\n        for (let j = 0; j < 8; j++) {\n            if (padding === DecodingPadding.Required) {\n                if (encoded[i + j] === \"=\") {\n                    continue;\n                }\n                if (i + j >= encoded.length) {\n                    throw new Error(\"Invalid padding\");\n                }\n            }\n            if (padding === DecodingPadding.Ignore) {\n                if (i + j >= encoded.length || encoded[i + j] === \"=\") {\n                    continue;\n                }\n            }\n            if (j > 0 && encoded[i + j - 1] === \"=\") {\n                throw new Error(\"Invalid padding\");\n            }\n            if (!(encoded[i + j] in decodeMap)) {\n                throw new Error(\"Invalid character\");\n            }\n            chunk |= BigInt(decodeMap[encoded[i + j]]) << BigInt((7 - j) * 5);\n            bitsRead += 5;\n        }\n        if (bitsRead < 40) {\n            let unused;\n            if (bitsRead === 10) {\n                unused = chunk & 0xffffffffn;\n            }\n            else if (bitsRead === 20) {\n                unused = chunk & 0xffffffn;\n            }\n            else if (bitsRead === 25) {\n                unused = chunk & 0xffffn;\n            }\n            else if (bitsRead === 35) {\n                unused = chunk & 0xffn;\n            }\n            else {\n                throw new Error(\"Invalid padding\");\n            }\n            if (unused !== 0n) {\n                throw new Error(\"Invalid padding\");\n            }\n        }\n        const byteLength = Math.floor(bitsRead / 8);\n        for (let i = 0; i < byteLength; i++) {\n            result[totalBytes] = Number((chunk >> BigInt(32 - i * 8)) & 0xffn);\n            totalBytes++;\n        }\n    }\n    return result.slice(0, totalBytes);\n}\nconst base32UpperCaseAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nconst base32LowerCaseAlphabet = \"abcdefghijklmnopqrstuvwxyz234567\";\nconst base32DecodeMap = {\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n    F: 5,\n    G: 6,\n    H: 7,\n    I: 8,\n    J: 9,\n    K: 10,\n    L: 11,\n    M: 12,\n    N: 13,\n    O: 14,\n    P: 15,\n    Q: 16,\n    R: 17,\n    S: 18,\n    T: 19,\n    U: 20,\n    V: 21,\n    W: 22,\n    X: 23,\n    Y: 24,\n    Z: 25,\n    a: 0,\n    b: 1,\n    c: 2,\n    d: 3,\n    e: 4,\n    f: 5,\n    g: 6,\n    h: 7,\n    i: 8,\n    j: 9,\n    k: 10,\n    l: 11,\n    m: 12,\n    n: 13,\n    o: 14,\n    p: 15,\n    q: 16,\n    r: 17,\n    s: 18,\n    t: 19,\n    u: 20,\n    v: 21,\n    w: 22,\n    x: 23,\n    y: 24,\n    z: 25,\n    \"2\": 26,\n    \"3\": 27,\n    \"4\": 28,\n    \"5\": 29,\n    \"6\": 30,\n    \"7\": 31\n};\nvar EncodingPadding;\n(function (EncodingPadding) {\n    EncodingPadding[EncodingPadding[\"Include\"] = 0] = \"Include\";\n    EncodingPadding[EncodingPadding[\"None\"] = 1] = \"None\";\n})(EncodingPadding || (EncodingPadding = {}));\nvar DecodingPadding;\n(function (DecodingPadding) {\n    DecodingPadding[DecodingPadding[\"Required\"] = 0] = \"Required\";\n    DecodingPadding[DecodingPadding[\"Ignore\"] = 1] = \"Ignore\";\n})(DecodingPadding || (DecodingPadding = {}));\n","export function encodeBase64(bytes) {\n    return encodeBase64_internal(bytes, base64Alphabet, EncodingPadding.Include);\n}\nexport function encodeBase64NoPadding(bytes) {\n    return encodeBase64_internal(bytes, base64Alphabet, EncodingPadding.None);\n}\nexport function encodeBase64url(bytes) {\n    return encodeBase64_internal(bytes, base64urlAlphabet, EncodingPadding.Include);\n}\nexport function encodeBase64urlNoPadding(bytes) {\n    return encodeBase64_internal(bytes, base64urlAlphabet, EncodingPadding.None);\n}\nfunction encodeBase64_internal(bytes, alphabet, padding) {\n    let result = \"\";\n    for (let i = 0; i < bytes.byteLength; i += 3) {\n        let buffer = 0;\n        let bufferBitSize = 0;\n        for (let j = 0; j < 3 && i + j < bytes.byteLength; j++) {\n            buffer = (buffer << 8) | bytes[i + j];\n            bufferBitSize += 8;\n        }\n        for (let j = 0; j < 4; j++) {\n            if (bufferBitSize >= 6) {\n                result += alphabet[(buffer >> (bufferBitSize - 6)) & 0x3f];\n                bufferBitSize -= 6;\n            }\n            else if (bufferBitSize > 0) {\n                result += alphabet[(buffer << (6 - bufferBitSize)) & 0x3f];\n                bufferBitSize = 0;\n            }\n            else if (padding === EncodingPadding.Include) {\n                result += \"=\";\n            }\n        }\n    }\n    return result;\n}\nconst base64Alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst base64urlAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\nexport function decodeBase64(encoded) {\n    return decodeBase64_internal(encoded, base64DecodeMap, DecodingPadding.Required);\n}\nexport function decodeBase64IgnorePadding(encoded) {\n    return decodeBase64_internal(encoded, base64DecodeMap, DecodingPadding.Ignore);\n}\nexport function decodeBase64url(encoded) {\n    return decodeBase64_internal(encoded, base64urlDecodeMap, DecodingPadding.Required);\n}\nexport function decodeBase64urlIgnorePadding(encoded) {\n    return decodeBase64_internal(encoded, base64urlDecodeMap, DecodingPadding.Ignore);\n}\nfunction decodeBase64_internal(encoded, decodeMap, padding) {\n    const result = new Uint8Array(Math.ceil(encoded.length / 4) * 3);\n    let totalBytes = 0;\n    for (let i = 0; i < encoded.length; i += 4) {\n        let chunk = 0;\n        let bitsRead = 0;\n        for (let j = 0; j < 4; j++) {\n            if (padding === DecodingPadding.Required && encoded[i + j] === \"=\") {\n                continue;\n            }\n            if (padding === DecodingPadding.Ignore &&\n                (i + j >= encoded.length || encoded[i + j] === \"=\")) {\n                continue;\n            }\n            if (j > 0 && encoded[i + j - 1] === \"=\") {\n                throw new Error(\"Invalid padding\");\n            }\n            if (!(encoded[i + j] in decodeMap)) {\n                throw new Error(\"Invalid character\");\n            }\n            chunk |= decodeMap[encoded[i + j]] << ((3 - j) * 6);\n            bitsRead += 6;\n        }\n        if (bitsRead < 24) {\n            let unused;\n            if (bitsRead === 12) {\n                unused = chunk & 0xffff;\n            }\n            else if (bitsRead === 18) {\n                unused = chunk & 0xff;\n            }\n            else {\n                throw new Error(\"Invalid padding\");\n            }\n            if (unused !== 0) {\n                throw new Error(\"Invalid padding\");\n            }\n        }\n        const byteLength = Math.floor(bitsRead / 8);\n        for (let i = 0; i < byteLength; i++) {\n            result[totalBytes] = (chunk >> (16 - i * 8)) & 0xff;\n            totalBytes++;\n        }\n    }\n    return result.slice(0, totalBytes);\n}\nvar EncodingPadding;\n(function (EncodingPadding) {\n    EncodingPadding[EncodingPadding[\"Include\"] = 0] = \"Include\";\n    EncodingPadding[EncodingPadding[\"None\"] = 1] = \"None\";\n})(EncodingPadding || (EncodingPadding = {}));\nvar DecodingPadding;\n(function (DecodingPadding) {\n    DecodingPadding[DecodingPadding[\"Required\"] = 0] = \"Required\";\n    DecodingPadding[DecodingPadding[\"Ignore\"] = 1] = \"Ignore\";\n})(DecodingPadding || (DecodingPadding = {}));\nconst base64DecodeMap = {\n    \"0\": 52,\n    \"1\": 53,\n    \"2\": 54,\n    \"3\": 55,\n    \"4\": 56,\n    \"5\": 57,\n    \"6\": 58,\n    \"7\": 59,\n    \"8\": 60,\n    \"9\": 61,\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n    F: 5,\n    G: 6,\n    H: 7,\n    I: 8,\n    J: 9,\n    K: 10,\n    L: 11,\n    M: 12,\n    N: 13,\n    O: 14,\n    P: 15,\n    Q: 16,\n    R: 17,\n    S: 18,\n    T: 19,\n    U: 20,\n    V: 21,\n    W: 22,\n    X: 23,\n    Y: 24,\n    Z: 25,\n    a: 26,\n    b: 27,\n    c: 28,\n    d: 29,\n    e: 30,\n    f: 31,\n    g: 32,\n    h: 33,\n    i: 34,\n    j: 35,\n    k: 36,\n    l: 37,\n    m: 38,\n    n: 39,\n    o: 40,\n    p: 41,\n    q: 42,\n    r: 43,\n    s: 44,\n    t: 45,\n    u: 46,\n    v: 47,\n    w: 48,\n    x: 49,\n    y: 50,\n    z: 51,\n    \"+\": 62,\n    \"/\": 63\n};\nconst base64urlDecodeMap = {\n    \"0\": 52,\n    \"1\": 53,\n    \"2\": 54,\n    \"3\": 55,\n    \"4\": 56,\n    \"5\": 57,\n    \"6\": 58,\n    \"7\": 59,\n    \"8\": 60,\n    \"9\": 61,\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n    F: 5,\n    G: 6,\n    H: 7,\n    I: 8,\n    J: 9,\n    K: 10,\n    L: 11,\n    M: 12,\n    N: 13,\n    O: 14,\n    P: 15,\n    Q: 16,\n    R: 17,\n    S: 18,\n    T: 19,\n    U: 20,\n    V: 21,\n    W: 22,\n    X: 23,\n    Y: 24,\n    Z: 25,\n    a: 26,\n    b: 27,\n    c: 28,\n    d: 29,\n    e: 30,\n    f: 31,\n    g: 32,\n    h: 33,\n    i: 34,\n    j: 35,\n    k: 36,\n    l: 37,\n    m: 38,\n    n: 39,\n    o: 40,\n    p: 41,\n    q: 42,\n    r: 43,\n    s: 44,\n    t: 45,\n    u: 46,\n    v: 47,\n    w: 48,\n    x: 49,\n    y: 50,\n    z: 51,\n    \"-\": 62,\n    _: 63\n};\n"],"names":["EncodingPadding","DecodingPadding"],"mappings":"AA8IU,IAAI,cAAc,CAAC;AAC7B,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAAI,mBAAmB;AACvB,IAA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","x_google_ignoreList":[0,1,2]}